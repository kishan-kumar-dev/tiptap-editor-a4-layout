{"ast":null,"code":"// src/paragraph.ts\nimport { mergeAttributes, Node } from \"@tiptap/core\";\nvar Paragraph = Node.create({\n  name: \"paragraph\",\n  priority: 1e3,\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  group: \"block\",\n  content: \"inline*\",\n  parseHTML() {\n    return [{\n      tag: \"p\"\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return [\"p\", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setParagraph: () => ({\n        commands\n      }) => {\n        return commands.setNode(this.name);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      \"Mod-Alt-0\": () => this.editor.commands.setParagraph()\n    };\n  }\n});\n\n// src/index.ts\nvar index_default = Paragraph;\nexport { Paragraph, index_default as default };","map":{"version":3,"names":["mergeAttributes","Node","Paragraph","create","name","priority","addOptions","HTMLAttributes","group","content","parseHTML","tag","renderHTML","options","addCommands","setParagraph","commands","setNode","addKeyboardShortcuts","Mod-Alt-0","editor","index_default"],"sources":["C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-paragraph\\src\\paragraph.ts","C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-paragraph\\src\\index.ts"],"sourcesContent":["import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface ParagraphOptions {\n  /**\n   * The HTML attributes for a paragraph node.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    paragraph: {\n      /**\n       * Toggle a paragraph\n       * @example editor.commands.toggleParagraph()\n       */\n      setParagraph: () => ReturnType\n    }\n  }\n}\n\n/**\n * This extension allows you to create paragraphs.\n * @see https://www.tiptap.dev/api/nodes/paragraph\n */\nexport const Paragraph = Node.create<ParagraphOptions>({\n  name: 'paragraph',\n\n  priority: 1000,\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  group: 'block',\n\n  content: 'inline*',\n\n  parseHTML() {\n    return [{ tag: 'p' }]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['p', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setParagraph:\n        () =>\n        ({ commands }) => {\n          return commands.setNode(this.name)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-0': () => this.editor.commands.setParagraph(),\n    }\n  },\n})\n","import { Paragraph } from './paragraph.js'\n\nexport * from './paragraph.js'\n\nexport default Paragraph\n"],"mappings":";AAAA,SAASA,eAAA,EAAiBC,IAAA,QAAY;AA2B/B,IAAMC,SAAA,GAAYD,IAAA,CAAKE,MAAA,CAAyB;EACrDC,IAAA,EAAM;EAENC,QAAA,EAAU;EAEVC,WAAA,EAAa;IACX,OAAO;MACLC,cAAA,EAAgB,CAAC;IACnB;EACF;EAEAC,KAAA,EAAO;EAEPC,OAAA,EAAS;EAETC,UAAA,EAAY;IACV,OAAO,CAAC;MAAEC,GAAA,EAAK;IAAI,CAAC;EACtB;EAEAC,WAAW;IAAEL;EAAe,GAAG;IAC7B,OAAO,CAAC,KAAKP,eAAA,CAAgB,KAAKa,OAAA,CAAQN,cAAA,EAAgBA,cAAc,GAAG,CAAC;EAC9E;EAEAO,YAAA,EAAc;IACZ,OAAO;MACLC,YAAA,EACEA,CAAA,KACA,CAAC;QAAEC;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASC,OAAA,CAAQ,KAAKb,IAAI;MACnC;IACJ;EACF;EAEAc,qBAAA,EAAuB;IACrB,OAAO;MACL,aAAaC,CAAA,KAAM,KAAKC,MAAA,CAAOJ,QAAA,CAASD,YAAA,CAAa;IACvD;EACF;AACF,CAAC;;;AC7DD,IAAOM,aAAA,GAAQnB,SAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}