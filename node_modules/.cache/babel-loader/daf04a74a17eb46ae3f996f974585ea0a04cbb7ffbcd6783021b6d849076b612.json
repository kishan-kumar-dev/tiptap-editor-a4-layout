{"ast":null,"code":"// src/strike.ts\nimport { Mark, markInputRule, markPasteRule, mergeAttributes } from \"@tiptap/core\";\nvar inputRegex = /(?:^|\\s)(~~(?!\\s+~~)((?:[^~]+))~~(?!\\s+~~))$/;\nvar pasteRegex = /(?:^|\\s)(~~(?!\\s+~~)((?:[^~]+))~~(?!\\s+~~))/g;\nvar Strike = Mark.create({\n  name: \"strike\",\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: \"s\"\n    }, {\n      tag: \"del\"\n    }, {\n      tag: \"strike\"\n    }, {\n      style: \"text-decoration\",\n      consuming: false,\n      getAttrs: style => style.includes(\"line-through\") ? {} : false\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return [\"s\", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setStrike: () => ({\n        commands\n      }) => {\n        return commands.setMark(this.name);\n      },\n      toggleStrike: () => ({\n        commands\n      }) => {\n        return commands.toggleMark(this.name);\n      },\n      unsetStrike: () => ({\n        commands\n      }) => {\n        return commands.unsetMark(this.name);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      \"Mod-Shift-s\": () => this.editor.commands.toggleStrike()\n    };\n  },\n  addInputRules() {\n    return [markInputRule({\n      find: inputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules() {\n    return [markPasteRule({\n      find: pasteRegex,\n      type: this.type\n    })];\n  }\n});\n\n// src/index.ts\nvar index_default = Strike;\nexport { Strike, index_default as default, inputRegex, pasteRegex };","map":{"version":3,"names":["Mark","markInputRule","markPasteRule","mergeAttributes","inputRegex","pasteRegex","Strike","create","name","addOptions","HTMLAttributes","parseHTML","tag","style","consuming","getAttrs","includes","renderHTML","options","addCommands","setStrike","commands","setMark","toggleStrike","toggleMark","unsetStrike","unsetMark","addKeyboardShortcuts","Mod-Shift-s","editor","addInputRules","find","type","addPasteRules","index_default"],"sources":["C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-strike\\src\\strike.ts","C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-strike\\src\\index.ts"],"sourcesContent":["import { Mark, markInputRule, markPasteRule, mergeAttributes } from '@tiptap/core'\n\nexport interface StrikeOptions {\n  /**\n   * HTML attributes to add to the strike element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    strike: {\n      /**\n       * Set a strike mark\n       * @example editor.commands.setStrike()\n       */\n      setStrike: () => ReturnType\n      /**\n       * Toggle a strike mark\n       * @example editor.commands.toggleStrike()\n       */\n      toggleStrike: () => ReturnType\n      /**\n       * Unset a strike mark\n       * @example editor.commands.unsetStrike()\n       */\n      unsetStrike: () => ReturnType\n    }\n  }\n}\n\n/**\n * Matches a strike to a ~~strike~~ on input.\n */\nexport const inputRegex = /(?:^|\\s)(~~(?!\\s+~~)((?:[^~]+))~~(?!\\s+~~))$/\n\n/**\n * Matches a strike to a ~~strike~~ on paste.\n */\nexport const pasteRegex = /(?:^|\\s)(~~(?!\\s+~~)((?:[^~]+))~~(?!\\s+~~))/g\n\n/**\n * This extension allows you to create strike text.\n * @see https://www.tiptap.dev/api/marks/strike\n */\nexport const Strike = Mark.create<StrikeOptions>({\n  name: 'strike',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 's',\n      },\n      {\n        tag: 'del',\n      },\n      {\n        tag: 'strike',\n      },\n      {\n        style: 'text-decoration',\n        consuming: false,\n        getAttrs: style => ((style as string).includes('line-through') ? {} : false),\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['s', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setStrike:\n        () =>\n        ({ commands }) => {\n          return commands.setMark(this.name)\n        },\n      toggleStrike:\n        () =>\n        ({ commands }) => {\n          return commands.toggleMark(this.name)\n        },\n      unsetStrike:\n        () =>\n        ({ commands }) => {\n          return commands.unsetMark(this.name)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-s': () => this.editor.commands.toggleStrike(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: pasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n","import { Strike } from './strike.js'\n\nexport * from './strike.js'\n\nexport default Strike\n"],"mappings":";AAAA,SAASA,IAAA,EAAMC,aAAA,EAAeC,aAAA,EAAeC,eAAA,QAAuB;AAoC7D,IAAMC,UAAA,GAAa;AAKnB,IAAMC,UAAA,GAAa;AAMnB,IAAMC,MAAA,GAASN,IAAA,CAAKO,MAAA,CAAsB;EAC/CC,IAAA,EAAM;EAENC,WAAA,EAAa;IACX,OAAO;MACLC,cAAA,EAAgB,CAAC;IACnB;EACF;EAEAC,UAAA,EAAY;IACV,OAAO,CACL;MACEC,GAAA,EAAK;IACP,GACA;MACEA,GAAA,EAAK;IACP,GACA;MACEA,GAAA,EAAK;IACP,GACA;MACEC,KAAA,EAAO;MACPC,SAAA,EAAW;MACXC,QAAA,EAAUF,KAAA,IAAWA,KAAA,CAAiBG,QAAA,CAAS,cAAc,IAAI,CAAC,IAAI;IACxE,EACF;EACF;EAEAC,WAAW;IAAEP;EAAe,GAAG;IAC7B,OAAO,CAAC,KAAKP,eAAA,CAAgB,KAAKe,OAAA,CAAQR,cAAA,EAAgBA,cAAc,GAAG,CAAC;EAC9E;EAEAS,YAAA,EAAc;IACZ,OAAO;MACLC,SAAA,EACEA,CAAA,KACA,CAAC;QAAEC;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASC,OAAA,CAAQ,KAAKd,IAAI;MACnC;MACFe,YAAA,EACEA,CAAA,KACA,CAAC;QAAEF;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASG,UAAA,CAAW,KAAKhB,IAAI;MACtC;MACFiB,WAAA,EACEA,CAAA,KACA,CAAC;QAAEJ;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASK,SAAA,CAAU,KAAKlB,IAAI;MACrC;IACJ;EACF;EAEAmB,qBAAA,EAAuB;IACrB,OAAO;MACL,eAAeC,CAAA,KAAM,KAAKC,MAAA,CAAOR,QAAA,CAASE,YAAA,CAAa;IACzD;EACF;EAEAO,cAAA,EAAgB;IACd,OAAO,CACL7B,aAAA,CAAc;MACZ8B,IAAA,EAAM3B,UAAA;MACN4B,IAAA,EAAM,KAAKA;IACb,CAAC,EACH;EACF;EAEAC,cAAA,EAAgB;IACd,OAAO,CACL/B,aAAA,CAAc;MACZ6B,IAAA,EAAM1B,UAAA;MACN2B,IAAA,EAAM,KAAKA;IACb,CAAC,EACH;EACF;AACF,CAAC;;;ACtHD,IAAOE,aAAA,GAAQ5B,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}