{"ast":null,"code":"// src/code-block.ts\nimport { mergeAttributes, Node, textblockTypeInputRule } from \"@tiptap/core\";\nimport { Plugin, PluginKey, Selection, TextSelection } from \"@tiptap/pm/state\";\nvar backtickInputRegex = /^```([a-z]+)?[\\s\\n]$/;\nvar tildeInputRegex = /^~~~([a-z]+)?[\\s\\n]$/;\nvar CodeBlock = Node.create({\n  name: \"codeBlock\",\n  addOptions() {\n    return {\n      languageClassPrefix: \"language-\",\n      exitOnTripleEnter: true,\n      exitOnArrowDown: true,\n      defaultLanguage: null,\n      HTMLAttributes: {}\n    };\n  },\n  content: \"text*\",\n  marks: \"\",\n  group: \"block\",\n  code: true,\n  defining: true,\n  addAttributes() {\n    return {\n      language: {\n        default: this.options.defaultLanguage,\n        parseHTML: element => {\n          var _a;\n          const {\n            languageClassPrefix\n          } = this.options;\n          const classNames = [...(((_a = element.firstElementChild) == null ? void 0 : _a.classList) || [])];\n          const languages = classNames.filter(className => className.startsWith(languageClassPrefix)).map(className => className.replace(languageClassPrefix, \"\"));\n          const language = languages[0];\n          if (!language) {\n            return null;\n          }\n          return language;\n        },\n        rendered: false\n      }\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: \"pre\",\n      preserveWhitespace: \"full\"\n    }];\n  },\n  renderHTML({\n    node,\n    HTMLAttributes\n  }) {\n    return [\"pre\", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), [\"code\", {\n      class: node.attrs.language ? this.options.languageClassPrefix + node.attrs.language : null\n    }, 0]];\n  },\n  addCommands() {\n    return {\n      setCodeBlock: attributes => ({\n        commands\n      }) => {\n        return commands.setNode(this.name, attributes);\n      },\n      toggleCodeBlock: attributes => ({\n        commands\n      }) => {\n        return commands.toggleNode(this.name, \"paragraph\", attributes);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      \"Mod-Alt-c\": () => this.editor.commands.toggleCodeBlock(),\n      // remove code block when at start of document or code block is empty\n      Backspace: () => {\n        const {\n          empty,\n          $anchor\n        } = this.editor.state.selection;\n        const isAtStart = $anchor.pos === 1;\n        if (!empty || $anchor.parent.type.name !== this.name) {\n          return false;\n        }\n        if (isAtStart || !$anchor.parent.textContent.length) {\n          return this.editor.commands.clearNodes();\n        }\n        return false;\n      },\n      // exit node on triple enter\n      Enter: ({\n        editor\n      }) => {\n        if (!this.options.exitOnTripleEnter) {\n          return false;\n        }\n        const {\n          state\n        } = editor;\n        const {\n          selection\n        } = state;\n        const {\n          $from,\n          empty\n        } = selection;\n        if (!empty || $from.parent.type !== this.type) {\n          return false;\n        }\n        const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;\n        const endsWithDoubleNewline = $from.parent.textContent.endsWith(\"\\n\\n\");\n        if (!isAtEnd || !endsWithDoubleNewline) {\n          return false;\n        }\n        return editor.chain().command(({\n          tr\n        }) => {\n          tr.delete($from.pos - 2, $from.pos);\n          return true;\n        }).exitCode().run();\n      },\n      // exit node on arrow down\n      ArrowDown: ({\n        editor\n      }) => {\n        if (!this.options.exitOnArrowDown) {\n          return false;\n        }\n        const {\n          state\n        } = editor;\n        const {\n          selection,\n          doc\n        } = state;\n        const {\n          $from,\n          empty\n        } = selection;\n        if (!empty || $from.parent.type !== this.type) {\n          return false;\n        }\n        const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;\n        if (!isAtEnd) {\n          return false;\n        }\n        const after = $from.after();\n        if (after === void 0) {\n          return false;\n        }\n        const nodeAfter = doc.nodeAt(after);\n        if (nodeAfter) {\n          return editor.commands.command(({\n            tr\n          }) => {\n            tr.setSelection(Selection.near(doc.resolve(after)));\n            return true;\n          });\n        }\n        return editor.commands.exitCode();\n      }\n    };\n  },\n  addInputRules() {\n    return [textblockTypeInputRule({\n      find: backtickInputRegex,\n      type: this.type,\n      getAttributes: match => ({\n        language: match[1]\n      })\n    }), textblockTypeInputRule({\n      find: tildeInputRegex,\n      type: this.type,\n      getAttributes: match => ({\n        language: match[1]\n      })\n    })];\n  },\n  addProseMirrorPlugins() {\n    return [\n    // this plugin creates a code block for pasted content from VS Code\n    // we can also detect the copied code language\n    new Plugin({\n      key: new PluginKey(\"codeBlockVSCodeHandler\"),\n      props: {\n        handlePaste: (view, event) => {\n          if (!event.clipboardData) {\n            return false;\n          }\n          if (this.editor.isActive(this.type.name)) {\n            return false;\n          }\n          const text = event.clipboardData.getData(\"text/plain\");\n          const vscode = event.clipboardData.getData(\"vscode-editor-data\");\n          const vscodeData = vscode ? JSON.parse(vscode) : void 0;\n          const language = vscodeData == null ? void 0 : vscodeData.mode;\n          if (!text || !language) {\n            return false;\n          }\n          const {\n            tr,\n            schema\n          } = view.state;\n          const textNode = schema.text(text.replace(/\\r\\n?/g, \"\\n\"));\n          tr.replaceSelectionWith(this.type.create({\n            language\n          }, textNode));\n          if (tr.selection.$from.parent.type !== this.type) {\n            tr.setSelection(TextSelection.near(tr.doc.resolve(Math.max(0, tr.selection.from - 2))));\n          }\n          tr.setMeta(\"paste\", true);\n          view.dispatch(tr);\n          return true;\n        }\n      }\n    })];\n  }\n});\n\n// src/index.ts\nvar index_default = CodeBlock;\nexport { CodeBlock, backtickInputRegex, index_default as default, tildeInputRegex };","map":{"version":3,"names":["mergeAttributes","Node","textblockTypeInputRule","Plugin","PluginKey","Selection","TextSelection","backtickInputRegex","tildeInputRegex","CodeBlock","create","name","addOptions","languageClassPrefix","exitOnTripleEnter","exitOnArrowDown","defaultLanguage","HTMLAttributes","content","marks","group","code","defining","addAttributes","language","default","options","parseHTML","element","_a","classNames","firstElementChild","classList","languages","filter","className","startsWith","map","replace","rendered","tag","preserveWhitespace","renderHTML","node","class","attrs","addCommands","setCodeBlock","attributes","commands","setNode","toggleCodeBlock","toggleNode","addKeyboardShortcuts","Mod-Alt-c","editor","Backspace","empty","$anchor","state","selection","isAtStart","pos","parent","type","textContent","length","clearNodes","Enter","$from","isAtEnd","parentOffset","nodeSize","endsWithDoubleNewline","endsWith","chain","command","tr","delete","exitCode","run","ArrowDown","doc","after","nodeAfter","nodeAt","setSelection","near","resolve","addInputRules","find","getAttributes","match","addProseMirrorPlugins","key","props","handlePaste","view","event","clipboardData","isActive","text","getData","vscode","vscodeData","JSON","parse","mode","schema","textNode","replaceSelectionWith","Math","max","from","setMeta","dispatch","index_default"],"sources":["C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-code-block\\src\\code-block.ts","C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-code-block\\src\\index.ts"],"sourcesContent":["import { mergeAttributes, Node, textblockTypeInputRule } from '@tiptap/core'\nimport { Plugin, PluginKey, Selection, TextSelection } from '@tiptap/pm/state'\n\nexport interface CodeBlockOptions {\n  /**\n   * Adds a prefix to language classes that are applied to code tags.\n   * @default 'language-'\n   */\n  languageClassPrefix: string\n  /**\n   * Define whether the node should be exited on triple enter.\n   * @default true\n   */\n  exitOnTripleEnter: boolean\n  /**\n   * Define whether the node should be exited on arrow down if there is no node after it.\n   * @default true\n   */\n  exitOnArrowDown: boolean\n  /**\n   * The default language.\n   * @default null\n   * @example 'js'\n   */\n  defaultLanguage: string | null | undefined\n  /**\n   * Custom HTML attributes that should be added to the rendered HTML tag.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    codeBlock: {\n      /**\n       * Set a code block\n       * @param attributes Code block attributes\n       * @example editor.commands.setCodeBlock({ language: 'javascript' })\n       */\n      setCodeBlock: (attributes?: { language: string }) => ReturnType\n      /**\n       * Toggle a code block\n       * @param attributes Code block attributes\n       * @example editor.commands.toggleCodeBlock({ language: 'javascript' })\n       */\n      toggleCodeBlock: (attributes?: { language: string }) => ReturnType\n    }\n  }\n}\n\n/**\n * Matches a code block with backticks.\n */\nexport const backtickInputRegex = /^```([a-z]+)?[\\s\\n]$/\n\n/**\n * Matches a code block with tildes.\n */\nexport const tildeInputRegex = /^~~~([a-z]+)?[\\s\\n]$/\n\n/**\n * This extension allows you to create code blocks.\n * @see https://tiptap.dev/api/nodes/code-block\n */\nexport const CodeBlock = Node.create<CodeBlockOptions>({\n  name: 'codeBlock',\n\n  addOptions() {\n    return {\n      languageClassPrefix: 'language-',\n      exitOnTripleEnter: true,\n      exitOnArrowDown: true,\n      defaultLanguage: null,\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'text*',\n\n  marks: '',\n\n  group: 'block',\n\n  code: true,\n\n  defining: true,\n\n  addAttributes() {\n    return {\n      language: {\n        default: this.options.defaultLanguage,\n        parseHTML: element => {\n          const { languageClassPrefix } = this.options\n          const classNames = [...(element.firstElementChild?.classList || [])]\n          const languages = classNames\n            .filter(className => className.startsWith(languageClassPrefix))\n            .map(className => className.replace(languageClassPrefix, ''))\n          const language = languages[0]\n\n          if (!language) {\n            return null\n          }\n\n          return language\n        },\n        rendered: false,\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'pre',\n        preserveWhitespace: 'full',\n      },\n    ]\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    return [\n      'pre',\n      mergeAttributes(this.options.HTMLAttributes, HTMLAttributes),\n      [\n        'code',\n        {\n          class: node.attrs.language ? this.options.languageClassPrefix + node.attrs.language : null,\n        },\n        0,\n      ],\n    ]\n  },\n\n  addCommands() {\n    return {\n      setCodeBlock:\n        attributes =>\n        ({ commands }) => {\n          return commands.setNode(this.name, attributes)\n        },\n      toggleCodeBlock:\n        attributes =>\n        ({ commands }) => {\n          return commands.toggleNode(this.name, 'paragraph', attributes)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-c': () => this.editor.commands.toggleCodeBlock(),\n\n      // remove code block when at start of document or code block is empty\n      Backspace: () => {\n        const { empty, $anchor } = this.editor.state.selection\n        const isAtStart = $anchor.pos === 1\n\n        if (!empty || $anchor.parent.type.name !== this.name) {\n          return false\n        }\n\n        if (isAtStart || !$anchor.parent.textContent.length) {\n          return this.editor.commands.clearNodes()\n        }\n\n        return false\n      },\n\n      // exit node on triple enter\n      Enter: ({ editor }) => {\n        if (!this.options.exitOnTripleEnter) {\n          return false\n        }\n\n        const { state } = editor\n        const { selection } = state\n        const { $from, empty } = selection\n\n        if (!empty || $from.parent.type !== this.type) {\n          return false\n        }\n\n        const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2\n        const endsWithDoubleNewline = $from.parent.textContent.endsWith('\\n\\n')\n\n        if (!isAtEnd || !endsWithDoubleNewline) {\n          return false\n        }\n\n        return editor\n          .chain()\n          .command(({ tr }) => {\n            tr.delete($from.pos - 2, $from.pos)\n\n            return true\n          })\n          .exitCode()\n          .run()\n      },\n\n      // exit node on arrow down\n      ArrowDown: ({ editor }) => {\n        if (!this.options.exitOnArrowDown) {\n          return false\n        }\n\n        const { state } = editor\n        const { selection, doc } = state\n        const { $from, empty } = selection\n\n        if (!empty || $from.parent.type !== this.type) {\n          return false\n        }\n\n        const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2\n\n        if (!isAtEnd) {\n          return false\n        }\n\n        const after = $from.after()\n\n        if (after === undefined) {\n          return false\n        }\n\n        const nodeAfter = doc.nodeAt(after)\n\n        if (nodeAfter) {\n          return editor.commands.command(({ tr }) => {\n            tr.setSelection(Selection.near(doc.resolve(after)))\n            return true\n          })\n        }\n\n        return editor.commands.exitCode()\n      },\n    }\n  },\n\n  addInputRules() {\n    return [\n      textblockTypeInputRule({\n        find: backtickInputRegex,\n        type: this.type,\n        getAttributes: match => ({\n          language: match[1],\n        }),\n      }),\n      textblockTypeInputRule({\n        find: tildeInputRegex,\n        type: this.type,\n        getAttributes: match => ({\n          language: match[1],\n        }),\n      }),\n    ]\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      // this plugin creates a code block for pasted content from VS Code\n      // we can also detect the copied code language\n      new Plugin({\n        key: new PluginKey('codeBlockVSCodeHandler'),\n        props: {\n          handlePaste: (view, event) => {\n            if (!event.clipboardData) {\n              return false\n            }\n\n            // don’t create a new code block within code blocks\n            if (this.editor.isActive(this.type.name)) {\n              return false\n            }\n\n            const text = event.clipboardData.getData('text/plain')\n            const vscode = event.clipboardData.getData('vscode-editor-data')\n            const vscodeData = vscode ? JSON.parse(vscode) : undefined\n            const language = vscodeData?.mode\n\n            if (!text || !language) {\n              return false\n            }\n\n            const { tr, schema } = view.state\n\n            // prepare a text node\n            // strip carriage return chars from text pasted as code\n            // see: https://github.com/ProseMirror/prosemirror-view/commit/a50a6bcceb4ce52ac8fcc6162488d8875613aacd\n            const textNode = schema.text(text.replace(/\\r\\n?/g, '\\n'))\n\n            // create a code block with the text node\n            // replace selection with the code block\n            tr.replaceSelectionWith(this.type.create({ language }, textNode))\n\n            if (tr.selection.$from.parent.type !== this.type) {\n              // put cursor inside the newly created code block\n              tr.setSelection(TextSelection.near(tr.doc.resolve(Math.max(0, tr.selection.from - 2))))\n            }\n\n            // store meta information\n            // this is useful for other plugins that depends on the paste event\n            // like the paste rule plugin\n            tr.setMeta('paste', true)\n\n            view.dispatch(tr)\n\n            return true\n          },\n        },\n      }),\n    ]\n  },\n})\n","import { CodeBlock } from './code-block.js'\n\nexport * from './code-block.js'\n\nexport default CodeBlock\n"],"mappings":";AAAA,SAASA,eAAA,EAAiBC,IAAA,EAAMC,sBAAA,QAA8B;AAC9D,SAASC,MAAA,EAAQC,SAAA,EAAWC,SAAA,EAAWC,aAAA,QAAqB;AAsDrD,IAAMC,kBAAA,GAAqB;AAK3B,IAAMC,eAAA,GAAkB;AAMxB,IAAMC,SAAA,GAAYR,IAAA,CAAKS,MAAA,CAAyB;EACrDC,IAAA,EAAM;EAENC,WAAA,EAAa;IACX,OAAO;MACLC,mBAAA,EAAqB;MACrBC,iBAAA,EAAmB;MACnBC,eAAA,EAAiB;MACjBC,eAAA,EAAiB;MACjBC,cAAA,EAAgB,CAAC;IACnB;EACF;EAEAC,OAAA,EAAS;EAETC,KAAA,EAAO;EAEPC,KAAA,EAAO;EAEPC,IAAA,EAAM;EAENC,QAAA,EAAU;EAEVC,cAAA,EAAgB;IACd,OAAO;MACLC,QAAA,EAAU;QACRC,OAAA,EAAS,KAAKC,OAAA,CAAQV,eAAA;QACtBW,SAAA,EAAWC,OAAA,IAAW;UA7F9B,IAAAC,EAAA;UA8FU,MAAM;YAAEhB;UAAoB,IAAI,KAAKa,OAAA;UACrC,MAAMI,UAAA,GAAa,CAAC,MAAID,EAAA,GAAAD,OAAA,CAAQG,iBAAA,KAAR,gBAAAF,EAAA,CAA2BG,SAAA,KAAa,EAAG;UACnE,MAAMC,SAAA,GAAYH,UAAA,CACfI,MAAA,CAAOC,SAAA,IAAaA,SAAA,CAAUC,UAAA,CAAWvB,mBAAmB,CAAC,EAC7DwB,GAAA,CAAIF,SAAA,IAAaA,SAAA,CAAUG,OAAA,CAAQzB,mBAAA,EAAqB,EAAE,CAAC;UAC9D,MAAMW,QAAA,GAAWS,SAAA,CAAU,CAAC;UAE5B,IAAI,CAACT,QAAA,EAAU;YACb,OAAO;UACT;UAEA,OAAOA,QAAA;QACT;QACAe,QAAA,EAAU;MACZ;IACF;EACF;EAEAZ,UAAA,EAAY;IACV,OAAO,CACL;MACEa,GAAA,EAAK;MACLC,kBAAA,EAAoB;IACtB,EACF;EACF;EAEAC,WAAW;IAAEC,IAAA;IAAM1B;EAAe,GAAG;IACnC,OAAO,CACL,OACAjB,eAAA,CAAgB,KAAK0B,OAAA,CAAQT,cAAA,EAAgBA,cAAc,GAC3D,CACE,QACA;MACE2B,KAAA,EAAOD,IAAA,CAAKE,KAAA,CAAMrB,QAAA,GAAW,KAAKE,OAAA,CAAQb,mBAAA,GAAsB8B,IAAA,CAAKE,KAAA,CAAMrB,QAAA,GAAW;IACxF,GACA,EACF,CACF;EACF;EAEAsB,YAAA,EAAc;IACZ,OAAO;MACLC,YAAA,EACEC,UAAA,IACA,CAAC;QAAEC;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASC,OAAA,CAAQ,KAAKvC,IAAA,EAAMqC,UAAU;MAC/C;MACFG,eAAA,EACEH,UAAA,IACA,CAAC;QAAEC;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASG,UAAA,CAAW,KAAKzC,IAAA,EAAM,aAAaqC,UAAU;MAC/D;IACJ;EACF;EAEAK,qBAAA,EAAuB;IACrB,OAAO;MACL,aAAaC,CAAA,KAAM,KAAKC,MAAA,CAAON,QAAA,CAASE,eAAA,CAAgB;MAAA;MAGxDK,SAAA,EAAWA,CAAA,KAAM;QACf,MAAM;UAAEC,KAAA;UAAOC;QAAQ,IAAI,KAAKH,MAAA,CAAOI,KAAA,CAAMC,SAAA;QAC7C,MAAMC,SAAA,GAAYH,OAAA,CAAQI,GAAA,KAAQ;QAElC,IAAI,CAACL,KAAA,IAASC,OAAA,CAAQK,MAAA,CAAOC,IAAA,CAAKrD,IAAA,KAAS,KAAKA,IAAA,EAAM;UACpD,OAAO;QACT;QAEA,IAAIkD,SAAA,IAAa,CAACH,OAAA,CAAQK,MAAA,CAAOE,WAAA,CAAYC,MAAA,EAAQ;UACnD,OAAO,KAAKX,MAAA,CAAON,QAAA,CAASkB,UAAA,CAAW;QACzC;QAEA,OAAO;MACT;MAAA;MAGAC,KAAA,EAAOA,CAAC;QAAEb;MAAO,MAAM;QACrB,IAAI,CAAC,KAAK7B,OAAA,CAAQZ,iBAAA,EAAmB;UACnC,OAAO;QACT;QAEA,MAAM;UAAE6C;QAAM,IAAIJ,MAAA;QAClB,MAAM;UAAEK;QAAU,IAAID,KAAA;QACtB,MAAM;UAAEU,KAAA;UAAOZ;QAAM,IAAIG,SAAA;QAEzB,IAAI,CAACH,KAAA,IAASY,KAAA,CAAMN,MAAA,CAAOC,IAAA,KAAS,KAAKA,IAAA,EAAM;UAC7C,OAAO;QACT;QAEA,MAAMM,OAAA,GAAUD,KAAA,CAAME,YAAA,KAAiBF,KAAA,CAAMN,MAAA,CAAOS,QAAA,GAAW;QAC/D,MAAMC,qBAAA,GAAwBJ,KAAA,CAAMN,MAAA,CAAOE,WAAA,CAAYS,QAAA,CAAS,MAAM;QAEtE,IAAI,CAACJ,OAAA,IAAW,CAACG,qBAAA,EAAuB;UACtC,OAAO;QACT;QAEA,OAAOlB,MAAA,CACJoB,KAAA,CAAM,EACNC,OAAA,CAAQ,CAAC;UAAEC;QAAG,MAAM;UACnBA,EAAA,CAAGC,MAAA,CAAOT,KAAA,CAAMP,GAAA,GAAM,GAAGO,KAAA,CAAMP,GAAG;UAElC,OAAO;QACT,CAAC,EACAiB,QAAA,CAAS,EACTC,GAAA,CAAI;MACT;MAAA;MAGAC,SAAA,EAAWA,CAAC;QAAE1B;MAAO,MAAM;QACzB,IAAI,CAAC,KAAK7B,OAAA,CAAQX,eAAA,EAAiB;UACjC,OAAO;QACT;QAEA,MAAM;UAAE4C;QAAM,IAAIJ,MAAA;QAClB,MAAM;UAAEK,SAAA;UAAWsB;QAAI,IAAIvB,KAAA;QAC3B,MAAM;UAAEU,KAAA;UAAOZ;QAAM,IAAIG,SAAA;QAEzB,IAAI,CAACH,KAAA,IAASY,KAAA,CAAMN,MAAA,CAAOC,IAAA,KAAS,KAAKA,IAAA,EAAM;UAC7C,OAAO;QACT;QAEA,MAAMM,OAAA,GAAUD,KAAA,CAAME,YAAA,KAAiBF,KAAA,CAAMN,MAAA,CAAOS,QAAA,GAAW;QAE/D,IAAI,CAACF,OAAA,EAAS;UACZ,OAAO;QACT;QAEA,MAAMa,KAAA,GAAQd,KAAA,CAAMc,KAAA,CAAM;QAE1B,IAAIA,KAAA,KAAU,QAAW;UACvB,OAAO;QACT;QAEA,MAAMC,SAAA,GAAYF,GAAA,CAAIG,MAAA,CAAOF,KAAK;QAElC,IAAIC,SAAA,EAAW;UACb,OAAO7B,MAAA,CAAON,QAAA,CAAS2B,OAAA,CAAQ,CAAC;YAAEC;UAAG,MAAM;YACzCA,EAAA,CAAGS,YAAA,CAAajF,SAAA,CAAUkF,IAAA,CAAKL,GAAA,CAAIM,OAAA,CAAQL,KAAK,CAAC,CAAC;YAClD,OAAO;UACT,CAAC;QACH;QAEA,OAAO5B,MAAA,CAAON,QAAA,CAAS8B,QAAA,CAAS;MAClC;IACF;EACF;EAEAU,cAAA,EAAgB;IACd,OAAO,CACLvF,sBAAA,CAAuB;MACrBwF,IAAA,EAAMnF,kBAAA;MACNyD,IAAA,EAAM,KAAKA,IAAA;MACX2B,aAAA,EAAeC,KAAA,KAAU;QACvBpE,QAAA,EAAUoE,KAAA,CAAM,CAAC;MACnB;IACF,CAAC,GACD1F,sBAAA,CAAuB;MACrBwF,IAAA,EAAMlF,eAAA;MACNwD,IAAA,EAAM,KAAKA,IAAA;MACX2B,aAAA,EAAeC,KAAA,KAAU;QACvBpE,QAAA,EAAUoE,KAAA,CAAM,CAAC;MACnB;IACF,CAAC,EACH;EACF;EAEAC,sBAAA,EAAwB;IACtB,OAAO;IAAA;IAAA;IAGL,IAAI1F,MAAA,CAAO;MACT2F,GAAA,EAAK,IAAI1F,SAAA,CAAU,wBAAwB;MAC3C2F,KAAA,EAAO;QACLC,WAAA,EAAaA,CAACC,IAAA,EAAMC,KAAA,KAAU;UAC5B,IAAI,CAACA,KAAA,CAAMC,aAAA,EAAe;YACxB,OAAO;UACT;UAGA,IAAI,KAAK5C,MAAA,CAAO6C,QAAA,CAAS,KAAKpC,IAAA,CAAKrD,IAAI,GAAG;YACxC,OAAO;UACT;UAEA,MAAM0F,IAAA,GAAOH,KAAA,CAAMC,aAAA,CAAcG,OAAA,CAAQ,YAAY;UACrD,MAAMC,MAAA,GAASL,KAAA,CAAMC,aAAA,CAAcG,OAAA,CAAQ,oBAAoB;UAC/D,MAAME,UAAA,GAAaD,MAAA,GAASE,IAAA,CAAKC,KAAA,CAAMH,MAAM,IAAI;UACjD,MAAM/E,QAAA,GAAWgF,UAAA,oBAAAA,UAAA,CAAYG,IAAA;UAE7B,IAAI,CAACN,IAAA,IAAQ,CAAC7E,QAAA,EAAU;YACtB,OAAO;UACT;UAEA,MAAM;YAAEqD,EAAA;YAAI+B;UAAO,IAAIX,IAAA,CAAKtC,KAAA;UAK5B,MAAMkD,QAAA,GAAWD,MAAA,CAAOP,IAAA,CAAKA,IAAA,CAAK/D,OAAA,CAAQ,UAAU,IAAI,CAAC;UAIzDuC,EAAA,CAAGiC,oBAAA,CAAqB,KAAK9C,IAAA,CAAKtD,MAAA,CAAO;YAAEc;UAAS,GAAGqF,QAAQ,CAAC;UAEhE,IAAIhC,EAAA,CAAGjB,SAAA,CAAUS,KAAA,CAAMN,MAAA,CAAOC,IAAA,KAAS,KAAKA,IAAA,EAAM;YAEhDa,EAAA,CAAGS,YAAA,CAAahF,aAAA,CAAciF,IAAA,CAAKV,EAAA,CAAGK,GAAA,CAAIM,OAAA,CAAQuB,IAAA,CAAKC,GAAA,CAAI,GAAGnC,EAAA,CAAGjB,SAAA,CAAUqD,IAAA,GAAO,CAAC,CAAC,CAAC,CAAC;UACxF;UAKApC,EAAA,CAAGqC,OAAA,CAAQ,SAAS,IAAI;UAExBjB,IAAA,CAAKkB,QAAA,CAAStC,EAAE;UAEhB,OAAO;QACT;MACF;IACF,CAAC,EACH;EACF;AACF,CAAC;;;ACxTD,IAAOuC,aAAA,GAAQ3G,SAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}