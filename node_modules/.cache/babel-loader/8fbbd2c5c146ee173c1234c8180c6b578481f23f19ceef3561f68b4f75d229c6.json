{"ast":null,"code":"// src/hard-break.ts\nimport { mergeAttributes, Node } from \"@tiptap/core\";\nvar HardBreak = Node.create({\n  name: \"hardBreak\",\n  addOptions() {\n    return {\n      keepMarks: true,\n      HTMLAttributes: {}\n    };\n  },\n  inline: true,\n  group: \"inline\",\n  selectable: false,\n  linebreakReplacement: true,\n  parseHTML() {\n    return [{\n      tag: \"br\"\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return [\"br\", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];\n  },\n  renderText() {\n    return \"\\n\";\n  },\n  addCommands() {\n    return {\n      setHardBreak: () => ({\n        commands,\n        chain,\n        state,\n        editor\n      }) => {\n        return commands.first([() => commands.exitCode(), () => commands.command(() => {\n          const {\n            selection,\n            storedMarks\n          } = state;\n          if (selection.$from.parent.type.spec.isolating) {\n            return false;\n          }\n          const {\n            keepMarks\n          } = this.options;\n          const {\n            splittableMarks\n          } = editor.extensionManager;\n          const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n          return chain().insertContent({\n            type: this.name\n          }).command(({\n            tr,\n            dispatch\n          }) => {\n            if (dispatch && marks && keepMarks) {\n              const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));\n              tr.ensureMarks(filteredMarks);\n            }\n            return true;\n          }).run();\n        })]);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      \"Mod-Enter\": () => this.editor.commands.setHardBreak(),\n      \"Shift-Enter\": () => this.editor.commands.setHardBreak()\n    };\n  }\n});\n\n// src/index.ts\nvar index_default = HardBreak;\nexport { HardBreak, index_default as default };","map":{"version":3,"names":["mergeAttributes","Node","HardBreak","create","name","addOptions","keepMarks","HTMLAttributes","inline","group","selectable","linebreakReplacement","parseHTML","tag","renderHTML","options","renderText","addCommands","setHardBreak","commands","chain","state","editor","first","exitCode","command","selection","storedMarks","$from","parent","type","spec","isolating","splittableMarks","extensionManager","marks","$to","parentOffset","insertContent","tr","dispatch","filteredMarks","filter","mark","includes","ensureMarks","run","addKeyboardShortcuts","Mod-Enter","Shift-Enter","index_default"],"sources":["C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-hard-break\\src\\hard-break.ts","C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-hard-break\\src\\index.ts"],"sourcesContent":["import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface HardBreakOptions {\n  /**\n   * Controls if marks should be kept after being split by a hard break.\n   * @default true\n   * @example false\n   */\n  keepMarks: boolean\n\n  /**\n   * HTML attributes to add to the hard break element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    hardBreak: {\n      /**\n       * Add a hard break\n       * @example editor.commands.setHardBreak()\n       */\n      setHardBreak: () => ReturnType\n    }\n  }\n}\n\n/**\n * This extension allows you to insert hard breaks.\n * @see https://www.tiptap.dev/api/nodes/hard-break\n */\nexport const HardBreak = Node.create<HardBreakOptions>({\n  name: 'hardBreak',\n\n  addOptions() {\n    return {\n      keepMarks: true,\n      HTMLAttributes: {},\n    }\n  },\n\n  inline: true,\n\n  group: 'inline',\n\n  selectable: false,\n\n  linebreakReplacement: true,\n\n  parseHTML() {\n    return [{ tag: 'br' }]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['br', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)]\n  },\n\n  renderText() {\n    return '\\n'\n  },\n\n  addCommands() {\n    return {\n      setHardBreak:\n        () =>\n        ({ commands, chain, state, editor }) => {\n          return commands.first([\n            () => commands.exitCode(),\n            () =>\n              commands.command(() => {\n                const { selection, storedMarks } = state\n\n                if (selection.$from.parent.type.spec.isolating) {\n                  return false\n                }\n\n                const { keepMarks } = this.options\n                const { splittableMarks } = editor.extensionManager\n                const marks = storedMarks || (selection.$to.parentOffset && selection.$from.marks())\n\n                return chain()\n                  .insertContent({ type: this.name })\n                  .command(({ tr, dispatch }) => {\n                    if (dispatch && marks && keepMarks) {\n                      const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name))\n\n                      tr.ensureMarks(filteredMarks)\n                    }\n\n                    return true\n                  })\n                  .run()\n              }),\n          ])\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Enter': () => this.editor.commands.setHardBreak(),\n      'Shift-Enter': () => this.editor.commands.setHardBreak(),\n    }\n  },\n})\n","import { HardBreak } from './hard-break.js'\n\nexport * from './hard-break.js'\n\nexport default HardBreak\n"],"mappings":";AAAA,SAASA,eAAA,EAAiBC,IAAA,QAAY;AAkC/B,IAAMC,SAAA,GAAYD,IAAA,CAAKE,MAAA,CAAyB;EACrDC,IAAA,EAAM;EAENC,WAAA,EAAa;IACX,OAAO;MACLC,SAAA,EAAW;MACXC,cAAA,EAAgB,CAAC;IACnB;EACF;EAEAC,MAAA,EAAQ;EAERC,KAAA,EAAO;EAEPC,UAAA,EAAY;EAEZC,oBAAA,EAAsB;EAEtBC,UAAA,EAAY;IACV,OAAO,CAAC;MAAEC,GAAA,EAAK;IAAK,CAAC;EACvB;EAEAC,WAAW;IAAEP;EAAe,GAAG;IAC7B,OAAO,CAAC,MAAMP,eAAA,CAAgB,KAAKe,OAAA,CAAQR,cAAA,EAAgBA,cAAc,CAAC;EAC5E;EAEAS,WAAA,EAAa;IACX,OAAO;EACT;EAEAC,YAAA,EAAc;IACZ,OAAO;MACLC,YAAA,EACEA,CAAA,KACA,CAAC;QAAEC,QAAA;QAAUC,KAAA;QAAOC,KAAA;QAAOC;MAAO,MAAM;QACtC,OAAOH,QAAA,CAASI,KAAA,CAAM,CACpB,MAAMJ,QAAA,CAASK,QAAA,CAAS,GACxB,MACEL,QAAA,CAASM,OAAA,CAAQ,MAAM;UACrB,MAAM;YAAEC,SAAA;YAAWC;UAAY,IAAIN,KAAA;UAEnC,IAAIK,SAAA,CAAUE,KAAA,CAAMC,MAAA,CAAOC,IAAA,CAAKC,IAAA,CAAKC,SAAA,EAAW;YAC9C,OAAO;UACT;UAEA,MAAM;YAAE1B;UAAU,IAAI,KAAKS,OAAA;UAC3B,MAAM;YAAEkB;UAAgB,IAAIX,MAAA,CAAOY,gBAAA;UACnC,MAAMC,KAAA,GAAQR,WAAA,IAAgBD,SAAA,CAAUU,GAAA,CAAIC,YAAA,IAAgBX,SAAA,CAAUE,KAAA,CAAMO,KAAA,CAAM;UAElF,OAAOf,KAAA,CAAM,EACVkB,aAAA,CAAc;YAAER,IAAA,EAAM,KAAK1B;UAAK,CAAC,EACjCqB,OAAA,CAAQ,CAAC;YAAEc,EAAA;YAAIC;UAAS,MAAM;YAC7B,IAAIA,QAAA,IAAYL,KAAA,IAAS7B,SAAA,EAAW;cAClC,MAAMmC,aAAA,GAAgBN,KAAA,CAAMO,MAAA,CAAOC,IAAA,IAAQV,eAAA,CAAgBW,QAAA,CAASD,IAAA,CAAKb,IAAA,CAAK1B,IAAI,CAAC;cAEnFmC,EAAA,CAAGM,WAAA,CAAYJ,aAAa;YAC9B;YAEA,OAAO;UACT,CAAC,EACAK,GAAA,CAAI;QACT,CAAC,EACJ;MACH;IACJ;EACF;EAEAC,qBAAA,EAAuB;IACrB,OAAO;MACL,aAAaC,CAAA,KAAM,KAAK1B,MAAA,CAAOH,QAAA,CAASD,YAAA,CAAa;MACrD,eAAe+B,CAAA,KAAM,KAAK3B,MAAA,CAAOH,QAAA,CAASD,YAAA,CAAa;IACzD;EACF;AACF,CAAC;;;ACvGD,IAAOgC,aAAA,GAAQhD,SAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}