{"ast":null,"code":"// src/text-align.ts\nimport { Extension } from \"@tiptap/core\";\nvar TextAlign = Extension.create({\n  name: \"textAlign\",\n  addOptions() {\n    return {\n      types: [],\n      alignments: [\"left\", \"center\", \"right\", \"justify\"],\n      defaultAlignment: null\n    };\n  },\n  addGlobalAttributes() {\n    return [{\n      types: this.options.types,\n      attributes: {\n        textAlign: {\n          default: this.options.defaultAlignment,\n          parseHTML: element => {\n            const alignment = element.style.textAlign;\n            return this.options.alignments.includes(alignment) ? alignment : this.options.defaultAlignment;\n          },\n          renderHTML: attributes => {\n            if (!attributes.textAlign) {\n              return {};\n            }\n            return {\n              style: `text-align: ${attributes.textAlign}`\n            };\n          }\n        }\n      }\n    }];\n  },\n  addCommands() {\n    return {\n      setTextAlign: alignment => ({\n        commands\n      }) => {\n        if (!this.options.alignments.includes(alignment)) {\n          return false;\n        }\n        return this.options.types.map(type => commands.updateAttributes(type, {\n          textAlign: alignment\n        })).every(response => response);\n      },\n      unsetTextAlign: () => ({\n        commands\n      }) => {\n        return this.options.types.map(type => commands.resetAttributes(type, \"textAlign\")).every(response => response);\n      },\n      toggleTextAlign: alignment => ({\n        editor,\n        commands\n      }) => {\n        if (!this.options.alignments.includes(alignment)) {\n          return false;\n        }\n        if (editor.isActive({\n          textAlign: alignment\n        })) {\n          return commands.unsetTextAlign();\n        }\n        return commands.setTextAlign(alignment);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      \"Mod-Shift-l\": () => this.editor.commands.setTextAlign(\"left\"),\n      \"Mod-Shift-e\": () => this.editor.commands.setTextAlign(\"center\"),\n      \"Mod-Shift-r\": () => this.editor.commands.setTextAlign(\"right\"),\n      \"Mod-Shift-j\": () => this.editor.commands.setTextAlign(\"justify\")\n    };\n  }\n});\n\n// src/index.ts\nvar index_default = TextAlign;\nexport { TextAlign, index_default as default };","map":{"version":3,"names":["Extension","TextAlign","create","name","addOptions","types","alignments","defaultAlignment","addGlobalAttributes","options","attributes","textAlign","default","parseHTML","element","alignment","style","includes","renderHTML","addCommands","setTextAlign","commands","map","type","updateAttributes","every","response","unsetTextAlign","resetAttributes","toggleTextAlign","editor","isActive","addKeyboardShortcuts","Mod-Shift-l","Mod-Shift-e","Mod-Shift-r","Mod-Shift-j","index_default"],"sources":["C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-text-align\\src\\text-align.ts","C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-text-align\\src\\index.ts"],"sourcesContent":["import { Extension } from '@tiptap/core'\n\nexport interface TextAlignOptions {\n  /**\n   * The types where the text align attribute can be applied.\n   * @default []\n   * @example ['heading', 'paragraph']\n   */\n  types: string[]\n\n  /**\n   * The alignments which are allowed.\n   * @default ['left', 'center', 'right', 'justify']\n   * @example ['left', 'right']\n   */\n  alignments: string[]\n\n  /**\n   * The default alignment.\n   * @default null\n   * @example 'center'\n   */\n  defaultAlignment: string | null\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    textAlign: {\n      /**\n       * Set the text align attribute\n       * @param alignment The alignment\n       * @example editor.commands.setTextAlign('left')\n       */\n      setTextAlign: (alignment: string) => ReturnType\n      /**\n       * Unset the text align attribute\n       * @example editor.commands.unsetTextAlign()\n       */\n      unsetTextAlign: () => ReturnType\n      /**\n       * Toggle the text align attribute\n       * @param alignment The alignment\n       * @example editor.commands.toggleTextAlign('right')\n       */\n      toggleTextAlign: (alignment: string) => ReturnType\n    }\n  }\n}\n\n/**\n * This extension allows you to align text.\n * @see https://www.tiptap.dev/api/extensions/text-align\n */\nexport const TextAlign = Extension.create<TextAlignOptions>({\n  name: 'textAlign',\n\n  addOptions() {\n    return {\n      types: [],\n      alignments: ['left', 'center', 'right', 'justify'],\n      defaultAlignment: null,\n    }\n  },\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          textAlign: {\n            default: this.options.defaultAlignment,\n            parseHTML: element => {\n              const alignment = element.style.textAlign\n\n              return this.options.alignments.includes(alignment) ? alignment : this.options.defaultAlignment\n            },\n            renderHTML: attributes => {\n              if (!attributes.textAlign) {\n                return {}\n              }\n\n              return { style: `text-align: ${attributes.textAlign}` }\n            },\n          },\n        },\n      },\n    ]\n  },\n\n  addCommands() {\n    return {\n      setTextAlign:\n        (alignment: string) =>\n        ({ commands }) => {\n          if (!this.options.alignments.includes(alignment)) {\n            return false\n          }\n\n          return this.options.types\n            .map(type => commands.updateAttributes(type, { textAlign: alignment }))\n            .every(response => response)\n        },\n\n      unsetTextAlign:\n        () =>\n        ({ commands }) => {\n          return this.options.types.map(type => commands.resetAttributes(type, 'textAlign')).every(response => response)\n        },\n\n      toggleTextAlign:\n        alignment =>\n        ({ editor, commands }) => {\n          if (!this.options.alignments.includes(alignment)) {\n            return false\n          }\n\n          if (editor.isActive({ textAlign: alignment })) {\n            return commands.unsetTextAlign()\n          }\n          return commands.setTextAlign(alignment)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-l': () => this.editor.commands.setTextAlign('left'),\n      'Mod-Shift-e': () => this.editor.commands.setTextAlign('center'),\n      'Mod-Shift-r': () => this.editor.commands.setTextAlign('right'),\n      'Mod-Shift-j': () => this.editor.commands.setTextAlign('justify'),\n    }\n  },\n})\n","import { TextAlign } from './text-align.js'\n\nexport * from './text-align.js'\n\nexport default TextAlign\n"],"mappings":";AAAA,SAASA,SAAA,QAAiB;AAqDnB,IAAMC,SAAA,GAAYD,SAAA,CAAUE,MAAA,CAAyB;EAC1DC,IAAA,EAAM;EAENC,WAAA,EAAa;IACX,OAAO;MACLC,KAAA,EAAO,EAAC;MACRC,UAAA,EAAY,CAAC,QAAQ,UAAU,SAAS,SAAS;MACjDC,gBAAA,EAAkB;IACpB;EACF;EAEAC,oBAAA,EAAsB;IACpB,OAAO,CACL;MACEH,KAAA,EAAO,KAAKI,OAAA,CAAQJ,KAAA;MACpBK,UAAA,EAAY;QACVC,SAAA,EAAW;UACTC,OAAA,EAAS,KAAKH,OAAA,CAAQF,gBAAA;UACtBM,SAAA,EAAWC,OAAA,IAAW;YACpB,MAAMC,SAAA,GAAYD,OAAA,CAAQE,KAAA,CAAML,SAAA;YAEhC,OAAO,KAAKF,OAAA,CAAQH,UAAA,CAAWW,QAAA,CAASF,SAAS,IAAIA,SAAA,GAAY,KAAKN,OAAA,CAAQF,gBAAA;UAChF;UACAW,UAAA,EAAYR,UAAA,IAAc;YACxB,IAAI,CAACA,UAAA,CAAWC,SAAA,EAAW;cACzB,OAAO,CAAC;YACV;YAEA,OAAO;cAAEK,KAAA,EAAO,eAAeN,UAAA,CAAWC,SAAS;YAAG;UACxD;QACF;MACF;IACF,EACF;EACF;EAEAQ,YAAA,EAAc;IACZ,OAAO;MACLC,YAAA,EACGL,SAAA,IACD,CAAC;QAAEM;MAAS,MAAM;QAChB,IAAI,CAAC,KAAKZ,OAAA,CAAQH,UAAA,CAAWW,QAAA,CAASF,SAAS,GAAG;UAChD,OAAO;QACT;QAEA,OAAO,KAAKN,OAAA,CAAQJ,KAAA,CACjBiB,GAAA,CAAIC,IAAA,IAAQF,QAAA,CAASG,gBAAA,CAAiBD,IAAA,EAAM;UAAEZ,SAAA,EAAWI;QAAU,CAAC,CAAC,EACrEU,KAAA,CAAMC,QAAA,IAAYA,QAAQ;MAC/B;MAEFC,cAAA,EACEA,CAAA,KACA,CAAC;QAAEN;MAAS,MAAM;QAChB,OAAO,KAAKZ,OAAA,CAAQJ,KAAA,CAAMiB,GAAA,CAAIC,IAAA,IAAQF,QAAA,CAASO,eAAA,CAAgBL,IAAA,EAAM,WAAW,CAAC,EAAEE,KAAA,CAAMC,QAAA,IAAYA,QAAQ;MAC/G;MAEFG,eAAA,EACEd,SAAA,IACA,CAAC;QAAEe,MAAA;QAAQT;MAAS,MAAM;QACxB,IAAI,CAAC,KAAKZ,OAAA,CAAQH,UAAA,CAAWW,QAAA,CAASF,SAAS,GAAG;UAChD,OAAO;QACT;QAEA,IAAIe,MAAA,CAAOC,QAAA,CAAS;UAAEpB,SAAA,EAAWI;QAAU,CAAC,GAAG;UAC7C,OAAOM,QAAA,CAASM,cAAA,CAAe;QACjC;QACA,OAAON,QAAA,CAASD,YAAA,CAAaL,SAAS;MACxC;IACJ;EACF;EAEAiB,qBAAA,EAAuB;IACrB,OAAO;MACL,eAAeC,CAAA,KAAM,KAAKH,MAAA,CAAOT,QAAA,CAASD,YAAA,CAAa,MAAM;MAC7D,eAAec,CAAA,KAAM,KAAKJ,MAAA,CAAOT,QAAA,CAASD,YAAA,CAAa,QAAQ;MAC/D,eAAee,CAAA,KAAM,KAAKL,MAAA,CAAOT,QAAA,CAASD,YAAA,CAAa,OAAO;MAC9D,eAAegB,CAAA,KAAM,KAAKN,MAAA,CAAOT,QAAA,CAASD,YAAA,CAAa,SAAS;IAClE;EACF;AACF,CAAC;;;AChID,IAAOiB,aAAA,GAAQpC,SAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}