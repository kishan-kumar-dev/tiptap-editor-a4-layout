{"ast":null,"code":"// src/italic.ts\nimport { Mark, markInputRule, markPasteRule, mergeAttributes } from \"@tiptap/core\";\nvar starInputRegex = /(?:^|\\s)(\\*(?!\\s+\\*)((?:[^*]+))\\*(?!\\s+\\*))$/;\nvar starPasteRegex = /(?:^|\\s)(\\*(?!\\s+\\*)((?:[^*]+))\\*(?!\\s+\\*))/g;\nvar underscoreInputRegex = /(?:^|\\s)(_(?!\\s+_)((?:[^_]+))_(?!\\s+_))$/;\nvar underscorePasteRegex = /(?:^|\\s)(_(?!\\s+_)((?:[^_]+))_(?!\\s+_))/g;\nvar Italic = Mark.create({\n  name: \"italic\",\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: \"em\"\n    }, {\n      tag: \"i\",\n      getAttrs: node => node.style.fontStyle !== \"normal\" && null\n    }, {\n      style: \"font-style=normal\",\n      clearMark: mark => mark.type.name === this.name\n    }, {\n      style: \"font-style=italic\"\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return [\"em\", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setItalic: () => ({\n        commands\n      }) => {\n        return commands.setMark(this.name);\n      },\n      toggleItalic: () => ({\n        commands\n      }) => {\n        return commands.toggleMark(this.name);\n      },\n      unsetItalic: () => ({\n        commands\n      }) => {\n        return commands.unsetMark(this.name);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      \"Mod-i\": () => this.editor.commands.toggleItalic(),\n      \"Mod-I\": () => this.editor.commands.toggleItalic()\n    };\n  },\n  addInputRules() {\n    return [markInputRule({\n      find: starInputRegex,\n      type: this.type\n    }), markInputRule({\n      find: underscoreInputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules() {\n    return [markPasteRule({\n      find: starPasteRegex,\n      type: this.type\n    }), markPasteRule({\n      find: underscorePasteRegex,\n      type: this.type\n    })];\n  }\n});\n\n// src/index.ts\nvar index_default = Italic;\nexport { Italic, index_default as default, starInputRegex, starPasteRegex, underscoreInputRegex, underscorePasteRegex };","map":{"version":3,"names":["Mark","markInputRule","markPasteRule","mergeAttributes","starInputRegex","starPasteRegex","underscoreInputRegex","underscorePasteRegex","Italic","create","name","addOptions","HTMLAttributes","parseHTML","tag","getAttrs","node","style","fontStyle","clearMark","mark","type","renderHTML","options","addCommands","setItalic","commands","setMark","toggleItalic","toggleMark","unsetItalic","unsetMark","addKeyboardShortcuts","Mod-i","editor","Mod-I","addInputRules","find","addPasteRules","index_default"],"sources":["C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-italic\\src\\italic.ts","C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-italic\\src\\index.ts"],"sourcesContent":["import { Mark, markInputRule, markPasteRule, mergeAttributes } from '@tiptap/core'\n\nexport interface ItalicOptions {\n  /**\n   * HTML attributes to add to the italic element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    italic: {\n      /**\n       * Set an italic mark\n       * @example editor.commands.setItalic()\n       */\n      setItalic: () => ReturnType\n      /**\n       * Toggle an italic mark\n       * @example editor.commands.toggleItalic()\n       */\n      toggleItalic: () => ReturnType\n      /**\n       * Unset an italic mark\n       * @example editor.commands.unsetItalic()\n       */\n      unsetItalic: () => ReturnType\n    }\n  }\n}\n\n/**\n * Matches an italic to a *italic* on input.\n */\nexport const starInputRegex = /(?:^|\\s)(\\*(?!\\s+\\*)((?:[^*]+))\\*(?!\\s+\\*))$/\n\n/**\n * Matches an italic to a *italic* on paste.\n */\nexport const starPasteRegex = /(?:^|\\s)(\\*(?!\\s+\\*)((?:[^*]+))\\*(?!\\s+\\*))/g\n\n/**\n * Matches an italic to a _italic_ on input.\n */\nexport const underscoreInputRegex = /(?:^|\\s)(_(?!\\s+_)((?:[^_]+))_(?!\\s+_))$/\n\n/**\n * Matches an italic to a _italic_ on paste.\n */\nexport const underscorePasteRegex = /(?:^|\\s)(_(?!\\s+_)((?:[^_]+))_(?!\\s+_))/g\n\n/**\n * This extension allows you to create italic text.\n * @see https://www.tiptap.dev/api/marks/italic\n */\nexport const Italic = Mark.create<ItalicOptions>({\n  name: 'italic',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'em',\n      },\n      {\n        tag: 'i',\n        getAttrs: node => (node as HTMLElement).style.fontStyle !== 'normal' && null,\n      },\n      {\n        style: 'font-style=normal',\n        clearMark: mark => mark.type.name === this.name,\n      },\n      {\n        style: 'font-style=italic',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setItalic:\n        () =>\n        ({ commands }) => {\n          return commands.setMark(this.name)\n        },\n      toggleItalic:\n        () =>\n        ({ commands }) => {\n          return commands.toggleMark(this.name)\n        },\n      unsetItalic:\n        () =>\n        ({ commands }) => {\n          return commands.unsetMark(this.name)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-i': () => this.editor.commands.toggleItalic(),\n      'Mod-I': () => this.editor.commands.toggleItalic(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: starInputRegex,\n        type: this.type,\n      }),\n      markInputRule({\n        find: underscoreInputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: starPasteRegex,\n        type: this.type,\n      }),\n      markPasteRule({\n        find: underscorePasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n","import { Italic } from './italic.js'\n\nexport * from './italic.js'\n\nexport default Italic\n"],"mappings":";AAAA,SAASA,IAAA,EAAMC,aAAA,EAAeC,aAAA,EAAeC,eAAA,QAAuB;AAoC7D,IAAMC,cAAA,GAAiB;AAKvB,IAAMC,cAAA,GAAiB;AAKvB,IAAMC,oBAAA,GAAuB;AAK7B,IAAMC,oBAAA,GAAuB;AAM7B,IAAMC,MAAA,GAASR,IAAA,CAAKS,MAAA,CAAsB;EAC/CC,IAAA,EAAM;EAENC,WAAA,EAAa;IACX,OAAO;MACLC,cAAA,EAAgB,CAAC;IACnB;EACF;EAEAC,UAAA,EAAY;IACV,OAAO,CACL;MACEC,GAAA,EAAK;IACP,GACA;MACEA,GAAA,EAAK;MACLC,QAAA,EAAUC,IAAA,IAASA,IAAA,CAAqBC,KAAA,CAAMC,SAAA,KAAc,YAAY;IAC1E,GACA;MACED,KAAA,EAAO;MACPE,SAAA,EAAWC,IAAA,IAAQA,IAAA,CAAKC,IAAA,CAAKX,IAAA,KAAS,KAAKA;IAC7C,GACA;MACEO,KAAA,EAAO;IACT,EACF;EACF;EAEAK,WAAW;IAAEV;EAAe,GAAG;IAC7B,OAAO,CAAC,MAAMT,eAAA,CAAgB,KAAKoB,OAAA,CAAQX,cAAA,EAAgBA,cAAc,GAAG,CAAC;EAC/E;EAEAY,YAAA,EAAc;IACZ,OAAO;MACLC,SAAA,EACEA,CAAA,KACA,CAAC;QAAEC;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASC,OAAA,CAAQ,KAAKjB,IAAI;MACnC;MACFkB,YAAA,EACEA,CAAA,KACA,CAAC;QAAEF;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASG,UAAA,CAAW,KAAKnB,IAAI;MACtC;MACFoB,WAAA,EACEA,CAAA,KACA,CAAC;QAAEJ;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASK,SAAA,CAAU,KAAKrB,IAAI;MACrC;IACJ;EACF;EAEAsB,qBAAA,EAAuB;IACrB,OAAO;MACL,SAASC,CAAA,KAAM,KAAKC,MAAA,CAAOR,QAAA,CAASE,YAAA,CAAa;MACjD,SAASO,CAAA,KAAM,KAAKD,MAAA,CAAOR,QAAA,CAASE,YAAA,CAAa;IACnD;EACF;EAEAQ,cAAA,EAAgB;IACd,OAAO,CACLnC,aAAA,CAAc;MACZoC,IAAA,EAAMjC,cAAA;MACNiB,IAAA,EAAM,KAAKA;IACb,CAAC,GACDpB,aAAA,CAAc;MACZoC,IAAA,EAAM/B,oBAAA;MACNe,IAAA,EAAM,KAAKA;IACb,CAAC,EACH;EACF;EAEAiB,cAAA,EAAgB;IACd,OAAO,CACLpC,aAAA,CAAc;MACZmC,IAAA,EAAMhC,cAAA;MACNgB,IAAA,EAAM,KAAKA;IACb,CAAC,GACDnB,aAAA,CAAc;MACZmC,IAAA,EAAM9B,oBAAA;MACNc,IAAA,EAAM,KAAKA;IACb,CAAC,EACH;EACF;AACF,CAAC;;;ACzID,IAAOkB,aAAA,GAAQ/B,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}