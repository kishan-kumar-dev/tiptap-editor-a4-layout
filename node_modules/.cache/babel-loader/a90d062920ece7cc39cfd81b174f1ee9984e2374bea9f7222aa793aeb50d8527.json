{"ast":null,"code":"// src/text-style/index.ts\nimport { Mark, mergeAttributes } from \"@tiptap/core\";\nvar mergeNestedSpanStyles = element => {\n  if (!element.children.length) {\n    return;\n  }\n  const childSpans = element.querySelectorAll(\"span\");\n  if (!childSpans) {\n    return;\n  }\n  childSpans.forEach(childSpan => {\n    var _a, _b;\n    const childStyle = childSpan.getAttribute(\"style\");\n    const closestParentSpanStyleOfChild = (_b = (_a = childSpan.parentElement) == null ? void 0 : _a.closest(\"span\")) == null ? void 0 : _b.getAttribute(\"style\");\n    childSpan.setAttribute(\"style\", `${closestParentSpanStyleOfChild};${childStyle}`);\n  });\n};\nvar TextStyle = Mark.create({\n  name: \"textStyle\",\n  priority: 101,\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n      mergeNestedSpanStyles: true\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: \"span\",\n      consuming: false,\n      getAttrs: element => {\n        const hasStyles = element.hasAttribute(\"style\");\n        if (!hasStyles) {\n          return false;\n        }\n        if (this.options.mergeNestedSpanStyles) {\n          mergeNestedSpanStyles(element);\n        }\n        return {};\n      }\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return [\"span\", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      toggleTextStyle: attributes => ({\n        commands\n      }) => {\n        return commands.toggleMark(this.name, attributes);\n      },\n      removeEmptyTextStyle: () => ({\n        tr\n      }) => {\n        const {\n          selection\n        } = tr;\n        tr.doc.nodesBetween(selection.from, selection.to, (node, pos) => {\n          if (node.isTextblock) {\n            return true;\n          }\n          if (!node.marks.filter(mark => mark.type === this.type).some(mark => Object.values(mark.attrs).some(value => !!value))) {\n            tr.removeMark(pos, pos + node.nodeSize, this.type);\n          }\n        });\n        return true;\n      }\n    };\n  }\n});\n\n// src/background-color/background-color.ts\nimport { Extension } from \"@tiptap/core\";\nvar BackgroundColor = Extension.create({\n  name: \"backgroundColor\",\n  addOptions() {\n    return {\n      types: [\"textStyle\"]\n    };\n  },\n  addGlobalAttributes() {\n    return [{\n      types: this.options.types,\n      attributes: {\n        backgroundColor: {\n          default: null,\n          parseHTML: element => {\n            var _a;\n            return (_a = element.style.backgroundColor) == null ? void 0 : _a.replace(/['\"]+/g, \"\");\n          },\n          renderHTML: attributes => {\n            if (!attributes.backgroundColor) {\n              return {};\n            }\n            return {\n              style: `background-color: ${attributes.backgroundColor}`\n            };\n          }\n        }\n      }\n    }];\n  },\n  addCommands() {\n    return {\n      setBackgroundColor: backgroundColor => ({\n        chain\n      }) => {\n        return chain().setMark(\"textStyle\", {\n          backgroundColor\n        }).run();\n      },\n      unsetBackgroundColor: () => ({\n        chain\n      }) => {\n        return chain().setMark(\"textStyle\", {\n          backgroundColor: null\n        }).removeEmptyTextStyle().run();\n      }\n    };\n  }\n});\n\n// src/color/color.ts\nimport { Extension as Extension2 } from \"@tiptap/core\";\nvar Color = Extension2.create({\n  name: \"color\",\n  addOptions() {\n    return {\n      types: [\"textStyle\"]\n    };\n  },\n  addGlobalAttributes() {\n    return [{\n      types: this.options.types,\n      attributes: {\n        color: {\n          default: null,\n          parseHTML: element => {\n            var _a;\n            return (_a = element.style.color) == null ? void 0 : _a.replace(/['\"]+/g, \"\");\n          },\n          renderHTML: attributes => {\n            if (!attributes.color) {\n              return {};\n            }\n            return {\n              style: `color: ${attributes.color}`\n            };\n          }\n        }\n      }\n    }];\n  },\n  addCommands() {\n    return {\n      setColor: color => ({\n        chain\n      }) => {\n        return chain().setMark(\"textStyle\", {\n          color\n        }).run();\n      },\n      unsetColor: () => ({\n        chain\n      }) => {\n        return chain().setMark(\"textStyle\", {\n          color: null\n        }).removeEmptyTextStyle().run();\n      }\n    };\n  }\n});\n\n// src/font-family/font-family.ts\nimport { Extension as Extension3 } from \"@tiptap/core\";\nvar FontFamily = Extension3.create({\n  name: \"fontFamily\",\n  addOptions() {\n    return {\n      types: [\"textStyle\"]\n    };\n  },\n  addGlobalAttributes() {\n    return [{\n      types: this.options.types,\n      attributes: {\n        fontFamily: {\n          default: null,\n          parseHTML: element => element.style.fontFamily,\n          renderHTML: attributes => {\n            if (!attributes.fontFamily) {\n              return {};\n            }\n            return {\n              style: `font-family: ${attributes.fontFamily}`\n            };\n          }\n        }\n      }\n    }];\n  },\n  addCommands() {\n    return {\n      setFontFamily: fontFamily => ({\n        chain\n      }) => {\n        return chain().setMark(\"textStyle\", {\n          fontFamily\n        }).run();\n      },\n      unsetFontFamily: () => ({\n        chain\n      }) => {\n        return chain().setMark(\"textStyle\", {\n          fontFamily: null\n        }).removeEmptyTextStyle().run();\n      }\n    };\n  }\n});\n\n// src/font-size/font-size.ts\nimport { Extension as Extension4 } from \"@tiptap/core\";\nvar FontSize = Extension4.create({\n  name: \"fontSize\",\n  addOptions() {\n    return {\n      types: [\"textStyle\"]\n    };\n  },\n  addGlobalAttributes() {\n    return [{\n      types: this.options.types,\n      attributes: {\n        fontSize: {\n          default: null,\n          parseHTML: element => element.style.fontSize,\n          renderHTML: attributes => {\n            if (!attributes.fontSize) {\n              return {};\n            }\n            return {\n              style: `font-size: ${attributes.fontSize}`\n            };\n          }\n        }\n      }\n    }];\n  },\n  addCommands() {\n    return {\n      setFontSize: fontSize => ({\n        chain\n      }) => {\n        return chain().setMark(\"textStyle\", {\n          fontSize\n        }).run();\n      },\n      unsetFontSize: () => ({\n        chain\n      }) => {\n        return chain().setMark(\"textStyle\", {\n          fontSize: null\n        }).removeEmptyTextStyle().run();\n      }\n    };\n  }\n});\n\n// src/line-height/line-height.ts\nimport { Extension as Extension5 } from \"@tiptap/core\";\nvar LineHeight = Extension5.create({\n  name: \"lineHeight\",\n  addOptions() {\n    return {\n      types: [\"textStyle\"]\n    };\n  },\n  addGlobalAttributes() {\n    return [{\n      types: this.options.types,\n      attributes: {\n        lineHeight: {\n          default: null,\n          parseHTML: element => element.style.lineHeight,\n          renderHTML: attributes => {\n            if (!attributes.lineHeight) {\n              return {};\n            }\n            return {\n              style: `line-height: ${attributes.lineHeight}`\n            };\n          }\n        }\n      }\n    }];\n  },\n  addCommands() {\n    return {\n      setLineHeight: lineHeight => ({\n        chain\n      }) => {\n        return chain().setMark(\"textStyle\", {\n          lineHeight\n        }).run();\n      },\n      unsetLineHeight: () => ({\n        chain\n      }) => {\n        return chain().setMark(\"textStyle\", {\n          lineHeight: null\n        }).removeEmptyTextStyle().run();\n      }\n    };\n  }\n});\n\n// src/text-style-kit/index.ts\nimport { Extension as Extension6 } from \"@tiptap/core\";\nvar TextStyleKit = Extension6.create({\n  name: \"textStyleKit\",\n  addExtensions() {\n    const extensions = [];\n    if (this.options.backgroundColor !== false) {\n      extensions.push(BackgroundColor.configure(this.options.backgroundColor));\n    }\n    if (this.options.color !== false) {\n      extensions.push(Color.configure(this.options.color));\n    }\n    if (this.options.fontFamily !== false) {\n      extensions.push(FontFamily.configure(this.options.fontFamily));\n    }\n    if (this.options.fontSize !== false) {\n      extensions.push(FontSize.configure(this.options.fontSize));\n    }\n    if (this.options.lineHeight !== false) {\n      extensions.push(LineHeight.configure(this.options.lineHeight));\n    }\n    if (this.options.textStyle !== false) {\n      extensions.push(TextStyle.configure(this.options.textStyle));\n    }\n    return extensions;\n  }\n});\nexport { BackgroundColor, Color, FontFamily, FontSize, LineHeight, TextStyle, TextStyleKit };","map":{"version":3,"names":["Mark","mergeAttributes","mergeNestedSpanStyles","element","children","length","childSpans","querySelectorAll","forEach","childSpan","_a","_b","childStyle","getAttribute","closestParentSpanStyleOfChild","parentElement","closest","setAttribute","TextStyle","create","name","priority","addOptions","HTMLAttributes","parseHTML","tag","consuming","getAttrs","hasStyles","hasAttribute","options","renderHTML","addCommands","toggleTextStyle","attributes","commands","toggleMark","removeEmptyTextStyle","tr","selection","doc","nodesBetween","from","to","node","pos","isTextblock","marks","filter","mark","type","some","Object","values","attrs","value","removeMark","nodeSize","Extension","BackgroundColor","types","addGlobalAttributes","backgroundColor","default","style","replace","setBackgroundColor","chain","setMark","run","unsetBackgroundColor","Extension2","Color","color","setColor","unsetColor","Extension3","FontFamily","fontFamily","setFontFamily","unsetFontFamily","Extension4","FontSize","fontSize","setFontSize","unsetFontSize","Extension5","LineHeight","lineHeight","setLineHeight","unsetLineHeight","Extension6","TextStyleKit","addExtensions","extensions","push","configure","textStyle"],"sources":["C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-text-style\\src\\text-style\\index.ts","C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-text-style\\src\\background-color\\background-color.ts","C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-text-style\\src\\color\\color.ts","C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-text-style\\src\\font-family\\font-family.ts","C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-text-style\\src\\font-size\\font-size.ts","C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-text-style\\src\\line-height\\line-height.ts","C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-text-style\\src\\text-style-kit\\index.ts"],"sourcesContent":["import { Mark, mergeAttributes } from '@tiptap/core'\n\nimport type { TextStyleAttributes } from '../index.js'\n\nexport interface TextStyleOptions {\n  /**\n   * HTML attributes to add to the span element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n  /**\n   * When enabled, merges the styles of nested spans into the child span during HTML parsing.\n   * This prioritizes the style of the child span.\n   * Used when parsing content created in other editors.\n   * (Fix for ProseMirror's default behavior.)\n   * @default true\n   */\n  mergeNestedSpanStyles: boolean\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    textStyle: {\n      /**\n       * Remove spans without inline style attributes.\n       * @example editor.commands.removeEmptyTextStyle()\n       */\n      removeEmptyTextStyle: () => ReturnType\n      /**\n       * Toggle a text style\n       * @param attributes The text style attributes\n       * @example editor.commands.toggleTextStyle({ fontWeight: 'bold' })\n       */\n      toggleTextStyle: (attributes?: TextStyleAttributes) => ReturnType\n    }\n  }\n}\n\nconst mergeNestedSpanStyles = (element: HTMLElement) => {\n  if (!element.children.length) {\n    return\n  }\n  const childSpans = element.querySelectorAll('span')\n\n  if (!childSpans) {\n    return\n  }\n\n  childSpans.forEach(childSpan => {\n    const childStyle = childSpan.getAttribute('style')\n    const closestParentSpanStyleOfChild = childSpan.parentElement?.closest('span')?.getAttribute('style')\n\n    childSpan.setAttribute('style', `${closestParentSpanStyleOfChild};${childStyle}`)\n  })\n}\n\n/**\n * This extension allows you to create text styles. It is required by default\n * for the `text-color` and `font-family` extensions.\n * @see https://www.tiptap.dev/api/marks/text-style\n */\nexport const TextStyle = Mark.create<TextStyleOptions>({\n  name: 'textStyle',\n\n  priority: 101,\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n      mergeNestedSpanStyles: true,\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'span',\n        consuming: false,\n        getAttrs: element => {\n          const hasStyles = (element as HTMLElement).hasAttribute('style')\n\n          if (!hasStyles) {\n            return false\n          }\n\n          if (this.options.mergeNestedSpanStyles) {\n            mergeNestedSpanStyles(element)\n          }\n\n          return {}\n        },\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleTextStyle:\n        attributes =>\n        ({ commands }) => {\n          return commands.toggleMark(this.name, attributes)\n        },\n      removeEmptyTextStyle:\n        () =>\n        ({ tr }) => {\n          const { selection } = tr\n\n          // Gather all of the nodes within the selection range.\n          // We would need to go through each node individually\n          // to check if it has any inline style attributes.\n          // Otherwise, calling commands.unsetMark(this.name)\n          // removes everything from all the nodes\n          // within the selection range.\n          tr.doc.nodesBetween(selection.from, selection.to, (node, pos) => {\n            // Check if it's a paragraph element, if so, skip this node as we apply\n            // the text style to inline text nodes only (span).\n            if (node.isTextblock) {\n              return true\n            }\n\n            // Check if the node has no inline style attributes.\n            // Filter out non-`textStyle` marks.\n            if (\n              !node.marks\n                .filter(mark => mark.type === this.type)\n                .some(mark => Object.values(mark.attrs).some(value => !!value))\n            ) {\n              // Proceed with the removal of the `textStyle` mark for this node only\n              tr.removeMark(pos, pos + node.nodeSize, this.type)\n            }\n          })\n\n          return true\n        },\n    }\n  },\n})\n","import '../text-style/index.js'\n\nimport { Extension } from '@tiptap/core'\n\nexport type BackgroundColorOptions = {\n  /**\n   * The types where the color can be applied\n   * @default ['textStyle']\n   * @example ['heading', 'paragraph']\n   */\n  types: string[]\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    backgroundColor: {\n      /**\n       * Set the text color\n       * @param backgroundColor The color to set\n       * @example editor.commands.setColor('red')\n       */\n      setBackgroundColor: (backgroundColor: string) => ReturnType\n\n      /**\n       * Unset the text backgroundColor\n       * @example editor.commands.unsetBackgroundColor()\n       */\n      unsetBackgroundColor: () => ReturnType\n    }\n  }\n}\n\n// @ts-ignore because the module is not found during dts build\ndeclare module '@tiptap/extension-text-style' {\n  interface TextStyleAttributes {\n    backgroundColor?: string | null\n  }\n}\n\n/**\n * This extension allows you to color your text.\n * @see https://tiptap.dev/api/extensions/background-color\n */\nexport const BackgroundColor = Extension.create<BackgroundColorOptions>({\n  name: 'backgroundColor',\n\n  addOptions() {\n    return {\n      types: ['textStyle'],\n    }\n  },\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          backgroundColor: {\n            default: null,\n            parseHTML: element => element.style.backgroundColor?.replace(/['\"]+/g, ''),\n            renderHTML: attributes => {\n              if (!attributes.backgroundColor) {\n                return {}\n              }\n\n              return {\n                style: `background-color: ${attributes.backgroundColor}`,\n              }\n            },\n          },\n        },\n      },\n    ]\n  },\n\n  addCommands() {\n    return {\n      setBackgroundColor:\n        backgroundColor =>\n        ({ chain }) => {\n          return chain().setMark('textStyle', { backgroundColor }).run()\n        },\n      unsetBackgroundColor:\n        () =>\n        ({ chain }) => {\n          return chain().setMark('textStyle', { backgroundColor: null }).removeEmptyTextStyle().run()\n        },\n    }\n  },\n})\n","import '../text-style/index.js'\n\nimport { Extension } from '@tiptap/core'\n\nexport type ColorOptions = {\n  /**\n   * The types where the color can be applied\n   * @default ['textStyle']\n   * @example ['heading', 'paragraph']\n   */\n  types: string[]\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    color: {\n      /**\n       * Set the text color\n       * @param color The color to set\n       * @example editor.commands.setColor('red')\n       */\n      setColor: (color: string) => ReturnType\n\n      /**\n       * Unset the text color\n       * @example editor.commands.unsetColor()\n       */\n      unsetColor: () => ReturnType\n    }\n  }\n}\n\n// @ts-ignore because the module is not found during dts build\ndeclare module '@tiptap/extension-text-style' {\n  interface TextStyleAttributes {\n    color?: string | null\n  }\n}\n\n/**\n * This extension allows you to color your text.\n * @see https://tiptap.dev/api/extensions/color\n */\nexport const Color = Extension.create<ColorOptions>({\n  name: 'color',\n\n  addOptions() {\n    return {\n      types: ['textStyle'],\n    }\n  },\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          color: {\n            default: null,\n            parseHTML: element => element.style.color?.replace(/['\"]+/g, ''),\n            renderHTML: attributes => {\n              if (!attributes.color) {\n                return {}\n              }\n\n              return {\n                style: `color: ${attributes.color}`,\n              }\n            },\n          },\n        },\n      },\n    ]\n  },\n\n  addCommands() {\n    return {\n      setColor:\n        color =>\n        ({ chain }) => {\n          return chain().setMark('textStyle', { color }).run()\n        },\n      unsetColor:\n        () =>\n        ({ chain }) => {\n          return chain().setMark('textStyle', { color: null }).removeEmptyTextStyle().run()\n        },\n    }\n  },\n})\n","import '../text-style/index.js'\n\nimport { Extension } from '@tiptap/core'\n\nexport type FontFamilyOptions = {\n  /**\n   * A list of node names where the font family can be applied.\n   * @default ['textStyle']\n   * @example ['heading', 'paragraph']\n   */\n  types: string[]\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    fontFamily: {\n      /**\n       * Set the font family\n       * @param fontFamily The font family\n       * @example editor.commands.setFontFamily('Arial')\n       */\n      setFontFamily: (fontFamily: string) => ReturnType\n      /**\n       * Unset the font family\n       * @example editor.commands.unsetFontFamily()\n       */\n      unsetFontFamily: () => ReturnType\n    }\n  }\n}\n\n// @ts-ignore because the module is not found during dts build\ndeclare module '@tiptap/extension-text-style' {\n  interface TextStyleAttributes {\n    fontFamily?: string | null\n  }\n}\n\n/**\n * This extension allows you to set a font family for text.\n * @see https://www.tiptap.dev/api/extensions/font-family\n */\nexport const FontFamily = Extension.create<FontFamilyOptions>({\n  name: 'fontFamily',\n\n  addOptions() {\n    return {\n      types: ['textStyle'],\n    }\n  },\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          fontFamily: {\n            default: null,\n            parseHTML: element => element.style.fontFamily,\n            renderHTML: attributes => {\n              if (!attributes.fontFamily) {\n                return {}\n              }\n\n              return {\n                style: `font-family: ${attributes.fontFamily}`,\n              }\n            },\n          },\n        },\n      },\n    ]\n  },\n\n  addCommands() {\n    return {\n      setFontFamily:\n        fontFamily =>\n        ({ chain }) => {\n          return chain().setMark('textStyle', { fontFamily }).run()\n        },\n      unsetFontFamily:\n        () =>\n        ({ chain }) => {\n          return chain().setMark('textStyle', { fontFamily: null }).removeEmptyTextStyle().run()\n        },\n    }\n  },\n})\n","import '../text-style/index.js'\n\nimport { Extension } from '@tiptap/core'\n\nexport type FontSizeOptions = {\n  /**\n   * A list of node names where the font size can be applied.\n   * @default ['textStyle']\n   * @example ['heading', 'paragraph']\n   */\n  types: string[]\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    fontSize: {\n      /**\n       * Set the font size\n       * @param fontSize The font size\n       * @example editor.commands.setFontSize('Arial')\n       */\n      setFontSize: (fontSize: string) => ReturnType\n      /**\n       * Unset the font size\n       * @example editor.commands.unsetFontSize()\n       */\n      unsetFontSize: () => ReturnType\n    }\n  }\n}\n\n// @ts-ignore because the module is not found during dts build\ndeclare module '@tiptap/extension-text-style' {\n  interface TextStyleAttributes {\n    fontSize?: string | null\n  }\n}\n\n/**\n * This extension allows you to set a font size for text.\n * @see https://www.tiptap.dev/api/extensions/font-size\n */\nexport const FontSize = Extension.create<FontSizeOptions>({\n  name: 'fontSize',\n\n  addOptions() {\n    return {\n      types: ['textStyle'],\n    }\n  },\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          fontSize: {\n            default: null,\n            parseHTML: element => element.style.fontSize,\n            renderHTML: attributes => {\n              if (!attributes.fontSize) {\n                return {}\n              }\n\n              return {\n                style: `font-size: ${attributes.fontSize}`,\n              }\n            },\n          },\n        },\n      },\n    ]\n  },\n\n  addCommands() {\n    return {\n      setFontSize:\n        fontSize =>\n        ({ chain }) => {\n          return chain().setMark('textStyle', { fontSize }).run()\n        },\n      unsetFontSize:\n        () =>\n        ({ chain }) => {\n          return chain().setMark('textStyle', { fontSize: null }).removeEmptyTextStyle().run()\n        },\n    }\n  },\n})\n","import '../text-style/index.js'\n\nimport { Extension } from '@tiptap/core'\n\nexport type LineHeightOptions = {\n  /**\n   * A list of node names where the line height can be applied.\n   * @default ['textStyle']\n   * @example ['heading', 'paragraph']\n   */\n  types: string[]\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    lineHeight: {\n      /**\n       * Set the line height\n       * @param lineHeight The line height\n       * @example editor.commands.setLineHeight('1.5')\n       */\n      setLineHeight: (lineHeight: string) => ReturnType\n      /**\n       * Unset the line height\n       * @example editor.commands.unsetLineHeight()\n       */\n      unsetLineHeight: () => ReturnType\n    }\n  }\n}\n\n// @ts-ignore because the module is not found during dts build\ndeclare module '@tiptap/extension-text-style' {\n  interface TextStyleAttributes {\n    lineHeight?: string | null\n  }\n}\n\n/**\n * This extension allows you to set the line-height for text.\n * @see https://www.tiptap.dev/api/extensions/line-height\n */\nexport const LineHeight = Extension.create<LineHeightOptions>({\n  name: 'lineHeight',\n\n  addOptions() {\n    return {\n      types: ['textStyle'],\n    }\n  },\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          lineHeight: {\n            default: null,\n            parseHTML: element => element.style.lineHeight,\n            renderHTML: attributes => {\n              if (!attributes.lineHeight) {\n                return {}\n              }\n\n              return {\n                style: `line-height: ${attributes.lineHeight}`,\n              }\n            },\n          },\n        },\n      },\n    ]\n  },\n\n  addCommands() {\n    return {\n      setLineHeight:\n        lineHeight =>\n        ({ chain }) => {\n          return chain().setMark('textStyle', { lineHeight }).run()\n        },\n      unsetLineHeight:\n        () =>\n        ({ chain }) => {\n          return chain().setMark('textStyle', { lineHeight: null }).removeEmptyTextStyle().run()\n        },\n    }\n  },\n})\n","import { Extension } from '@tiptap/core'\n\nimport type { BackgroundColorOptions } from '../background-color/index.js'\nimport { BackgroundColor } from '../background-color/index.js'\nimport type { ColorOptions } from '../color/index.js'\nimport { Color } from '../color/index.js'\nimport type { FontFamilyOptions } from '../font-family/index.js'\nimport { FontFamily } from '../font-family/index.js'\nimport type { FontSizeOptions } from '../font-size/index.js'\nimport { FontSize } from '../font-size/index.js'\nimport type { LineHeightOptions } from '../line-height/index.js'\nimport { LineHeight } from '../line-height/index.js'\nimport type { TextStyleOptions } from '../text-style/index.js'\nimport { TextStyle } from '../text-style/index.js'\n\nexport interface TextStyleKitOptions {\n  /**\n   * If set to false, the background color extension will not be registered\n   * @example backgroundColor: false\n   */\n  backgroundColor: Partial<BackgroundColorOptions> | false\n  /**\n   * If set to false, the color extension will not be registered\n   * @example color: false\n   */\n  color: Partial<ColorOptions> | false\n  /**\n   * If set to false, the font family extension will not be registered\n   * @example fontFamily: false\n   */\n  fontFamily: Partial<FontFamilyOptions> | false\n  /**\n   * If set to false, the font size extension will not be registered\n   * @example fontSize: false\n   */\n  fontSize: Partial<FontSizeOptions> | false\n  /**\n   * If set to false, the line height extension will not be registered\n   * @example lineHeight: false\n   */\n  lineHeight: Partial<LineHeightOptions> | false\n  /**\n   * If set to false, the text style extension will not be registered (required for other text style extensions)\n   * @example textStyle: false\n   */\n  textStyle: Partial<TextStyleOptions> | false\n}\n\n/**\n * The table kit is a collection of table editor extensions.\n *\n * It’s a good starting point for building your own table in Tiptap.\n */\nexport const TextStyleKit = Extension.create<TextStyleKitOptions>({\n  name: 'textStyleKit',\n\n  addExtensions() {\n    const extensions = []\n\n    if (this.options.backgroundColor !== false) {\n      extensions.push(BackgroundColor.configure(this.options.backgroundColor))\n    }\n\n    if (this.options.color !== false) {\n      extensions.push(Color.configure(this.options.color))\n    }\n\n    if (this.options.fontFamily !== false) {\n      extensions.push(FontFamily.configure(this.options.fontFamily))\n    }\n\n    if (this.options.fontSize !== false) {\n      extensions.push(FontSize.configure(this.options.fontSize))\n    }\n\n    if (this.options.lineHeight !== false) {\n      extensions.push(LineHeight.configure(this.options.lineHeight))\n    }\n\n    if (this.options.textStyle !== false) {\n      extensions.push(TextStyle.configure(this.options.textStyle))\n    }\n\n    return extensions\n  },\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}