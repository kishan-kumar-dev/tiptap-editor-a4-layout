{"ast":null,"code":"// src/code.ts\nimport { Mark, markInputRule, markPasteRule, mergeAttributes } from \"@tiptap/core\";\nvar inputRegex = /(^|[^`])`([^`]+)`(?!`)/;\nvar pasteRegex = /(^|[^`])`([^`]+)`(?!`)/g;\nvar Code = Mark.create({\n  name: \"code\",\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  excludes: \"_\",\n  code: true,\n  exitable: true,\n  parseHTML() {\n    return [{\n      tag: \"code\"\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return [\"code\", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setCode: () => ({\n        commands\n      }) => {\n        return commands.setMark(this.name);\n      },\n      toggleCode: () => ({\n        commands\n      }) => {\n        return commands.toggleMark(this.name);\n      },\n      unsetCode: () => ({\n        commands\n      }) => {\n        return commands.unsetMark(this.name);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      \"Mod-e\": () => this.editor.commands.toggleCode()\n    };\n  },\n  addInputRules() {\n    return [markInputRule({\n      find: inputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules() {\n    return [markPasteRule({\n      find: pasteRegex,\n      type: this.type\n    })];\n  }\n});\n\n// src/index.ts\nvar index_default = Code;\nexport { Code, index_default as default, inputRegex, pasteRegex };","map":{"version":3,"names":["Mark","markInputRule","markPasteRule","mergeAttributes","inputRegex","pasteRegex","Code","create","name","addOptions","HTMLAttributes","excludes","code","exitable","parseHTML","tag","renderHTML","options","addCommands","setCode","commands","setMark","toggleCode","toggleMark","unsetCode","unsetMark","addKeyboardShortcuts","Mod-e","editor","addInputRules","find","type","addPasteRules","index_default"],"sources":["C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-code\\src\\code.ts","C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-code\\src\\index.ts"],"sourcesContent":["import { Mark, markInputRule, markPasteRule, mergeAttributes } from '@tiptap/core'\n\nexport interface CodeOptions {\n  /**\n   * The HTML attributes applied to the code element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    code: {\n      /**\n       * Set a code mark\n       */\n      setCode: () => ReturnType\n      /**\n       * Toggle inline code\n       */\n      toggleCode: () => ReturnType\n      /**\n       * Unset a code mark\n       */\n      unsetCode: () => ReturnType\n    }\n  }\n}\n\n/**\n * Regular expressions to match inline code blocks enclosed in backticks.\n *  It matches:\n *     - An opening backtick, followed by\n *     - Any text that doesn't include a backtick (captured for marking), followed by\n *     - A closing backtick.\n *  This ensures that any text between backticks is formatted as code,\n *  regardless of the surrounding characters (exception being another backtick).\n */\nexport const inputRegex = /(^|[^`])`([^`]+)`(?!`)/\n\n/**\n * Matches inline code while pasting.\n */\nexport const pasteRegex = /(^|[^`])`([^`]+)`(?!`)/g\n\n/**\n * This extension allows you to mark text as inline code.\n * @see https://tiptap.dev/api/marks/code\n */\nexport const Code = Mark.create<CodeOptions>({\n  name: 'code',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  excludes: '_',\n\n  code: true,\n\n  exitable: true,\n\n  parseHTML() {\n    return [{ tag: 'code' }]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['code', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setCode:\n        () =>\n        ({ commands }) => {\n          return commands.setMark(this.name)\n        },\n      toggleCode:\n        () =>\n        ({ commands }) => {\n          return commands.toggleMark(this.name)\n        },\n      unsetCode:\n        () =>\n        ({ commands }) => {\n          return commands.unsetMark(this.name)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-e': () => this.editor.commands.toggleCode(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: pasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n","import { Code } from './code.js'\n\nexport * from './code.js'\n\nexport default Code\n"],"mappings":";AAAA,SAASA,IAAA,EAAMC,aAAA,EAAeC,aAAA,EAAeC,eAAA,QAAuB;AAuC7D,IAAMC,UAAA,GAAa;AAKnB,IAAMC,UAAA,GAAa;AAMnB,IAAMC,IAAA,GAAON,IAAA,CAAKO,MAAA,CAAoB;EAC3CC,IAAA,EAAM;EAENC,WAAA,EAAa;IACX,OAAO;MACLC,cAAA,EAAgB,CAAC;IACnB;EACF;EAEAC,QAAA,EAAU;EAEVC,IAAA,EAAM;EAENC,QAAA,EAAU;EAEVC,UAAA,EAAY;IACV,OAAO,CAAC;MAAEC,GAAA,EAAK;IAAO,CAAC;EACzB;EAEAC,WAAW;IAAEN;EAAe,GAAG;IAC7B,OAAO,CAAC,QAAQP,eAAA,CAAgB,KAAKc,OAAA,CAAQP,cAAA,EAAgBA,cAAc,GAAG,CAAC;EACjF;EAEAQ,YAAA,EAAc;IACZ,OAAO;MACLC,OAAA,EACEA,CAAA,KACA,CAAC;QAAEC;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASC,OAAA,CAAQ,KAAKb,IAAI;MACnC;MACFc,UAAA,EACEA,CAAA,KACA,CAAC;QAAEF;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASG,UAAA,CAAW,KAAKf,IAAI;MACtC;MACFgB,SAAA,EACEA,CAAA,KACA,CAAC;QAAEJ;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASK,SAAA,CAAU,KAAKjB,IAAI;MACrC;IACJ;EACF;EAEAkB,qBAAA,EAAuB;IACrB,OAAO;MACL,SAASC,CAAA,KAAM,KAAKC,MAAA,CAAOR,QAAA,CAASE,UAAA,CAAW;IACjD;EACF;EAEAO,cAAA,EAAgB;IACd,OAAO,CACL5B,aAAA,CAAc;MACZ6B,IAAA,EAAM1B,UAAA;MACN2B,IAAA,EAAM,KAAKA;IACb,CAAC,EACH;EACF;EAEAC,cAAA,EAAgB;IACd,OAAO,CACL9B,aAAA,CAAc;MACZ4B,IAAA,EAAMzB,UAAA;MACN0B,IAAA,EAAM,KAAKA;IACb,CAAC,EACH;EACF;AACF,CAAC;;;AChHD,IAAOE,aAAA,GAAQ3B,IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}