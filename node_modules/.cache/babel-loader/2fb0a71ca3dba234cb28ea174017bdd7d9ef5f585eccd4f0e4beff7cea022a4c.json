{"ast":null,"code":"// src/blockquote.tsx\nimport { mergeAttributes, Node, wrappingInputRule } from \"@tiptap/core\";\nimport { jsx } from \"@tiptap/core/jsx-runtime\";\nvar inputRegex = /^\\s*>\\s$/;\nvar Blockquote = Node.create({\n  name: \"blockquote\",\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  content: \"block+\",\n  group: \"block\",\n  defining: true,\n  parseHTML() {\n    return [{\n      tag: \"blockquote\"\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return /* @__PURE__ */jsx(\"blockquote\", {\n      ...mergeAttributes(this.options.HTMLAttributes, HTMLAttributes),\n      children: /* @__PURE__ */jsx(\"slot\", {})\n    });\n  },\n  addCommands() {\n    return {\n      setBlockquote: () => ({\n        commands\n      }) => {\n        return commands.wrapIn(this.name);\n      },\n      toggleBlockquote: () => ({\n        commands\n      }) => {\n        return commands.toggleWrap(this.name);\n      },\n      unsetBlockquote: () => ({\n        commands\n      }) => {\n        return commands.lift(this.name);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      \"Mod-Shift-b\": () => this.editor.commands.toggleBlockquote()\n    };\n  },\n  addInputRules() {\n    return [wrappingInputRule({\n      find: inputRegex,\n      type: this.type\n    })];\n  }\n});\n\n// src/index.ts\nvar index_default = Blockquote;\nexport { Blockquote, index_default as default, inputRegex };","map":{"version":3,"names":["mergeAttributes","Node","wrappingInputRule","jsx","inputRegex","Blockquote","create","name","addOptions","HTMLAttributes","content","group","defining","parseHTML","tag","renderHTML","options","children","addCommands","setBlockquote","commands","wrapIn","toggleBlockquote","toggleWrap","unsetBlockquote","lift","addKeyboardShortcuts","Mod-Shift-b","editor","addInputRules","find","type","index_default"],"sources":["C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-blockquote\\src\\blockquote.tsx","C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-blockquote\\src\\index.ts"],"sourcesContent":["/** @jsxImportSource @tiptap/core */\nimport { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\n\nexport interface BlockquoteOptions {\n  /**\n   * HTML attributes to add to the blockquote element\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    blockQuote: {\n      /**\n       * Set a blockquote node\n       */\n      setBlockquote: () => ReturnType\n      /**\n       * Toggle a blockquote node\n       */\n      toggleBlockquote: () => ReturnType\n      /**\n       * Unset a blockquote node\n       */\n      unsetBlockquote: () => ReturnType\n    }\n  }\n}\n\n/**\n * Matches a blockquote to a `>` as input.\n */\nexport const inputRegex = /^\\s*>\\s$/\n\n/**\n * This extension allows you to create blockquotes.\n * @see https://tiptap.dev/api/nodes/blockquote\n */\nexport const Blockquote = Node.create<BlockquoteOptions>({\n  name: 'blockquote',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'block+',\n\n  group: 'block',\n\n  defining: true,\n\n  parseHTML() {\n    return [{ tag: 'blockquote' }]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return (\n      <blockquote {...mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)}>\n        <slot />\n      </blockquote>\n    )\n  },\n\n  addCommands() {\n    return {\n      setBlockquote:\n        () =>\n        ({ commands }) => {\n          return commands.wrapIn(this.name)\n        },\n      toggleBlockquote:\n        () =>\n        ({ commands }) => {\n          return commands.toggleWrap(this.name)\n        },\n      unsetBlockquote:\n        () =>\n        ({ commands }) => {\n          return commands.lift(this.name)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-b': () => this.editor.commands.toggleBlockquote(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n","import { Blockquote } from './blockquote.jsx'\n\nexport * from './blockquote.jsx'\n\nexport default Blockquote\n"],"mappings":";AACA,SAASA,eAAA,EAAiBC,IAAA,EAAMC,iBAAA,QAAyB;AA6DjD,SAAAC,GAAA;AA5BD,IAAMC,UAAA,GAAa;AAMnB,IAAMC,UAAA,GAAaJ,IAAA,CAAKK,MAAA,CAA0B;EACvDC,IAAA,EAAM;EAENC,WAAA,EAAa;IACX,OAAO;MACLC,cAAA,EAAgB,CAAC;IACnB;EACF;EAEAC,OAAA,EAAS;EAETC,KAAA,EAAO;EAEPC,QAAA,EAAU;EAEVC,UAAA,EAAY;IACV,OAAO,CAAC;MAAEC,GAAA,EAAK;IAAa,CAAC;EAC/B;EAEAC,WAAW;IAAEN;EAAe,GAAG;IAC7B,OACE,eAAAN,GAAA,CAAC;MAAY,GAAGH,eAAA,CAAgB,KAAKgB,OAAA,CAAQP,cAAA,EAAgBA,cAAc;MACzEQ,QAAA,iBAAAd,GAAA,CAAC,UAAK;IAAA,CACR;EAEJ;EAEAe,YAAA,EAAc;IACZ,OAAO;MACLC,aAAA,EACEA,CAAA,KACA,CAAC;QAAEC;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASC,MAAA,CAAO,KAAKd,IAAI;MAClC;MACFe,gBAAA,EACEA,CAAA,KACA,CAAC;QAAEF;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASG,UAAA,CAAW,KAAKhB,IAAI;MACtC;MACFiB,eAAA,EACEA,CAAA,KACA,CAAC;QAAEJ;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASK,IAAA,CAAK,KAAKlB,IAAI;MAChC;IACJ;EACF;EAEAmB,qBAAA,EAAuB;IACrB,OAAO;MACL,eAAeC,CAAA,KAAM,KAAKC,MAAA,CAAOR,QAAA,CAASE,gBAAA,CAAiB;IAC7D;EACF;EAEAO,cAAA,EAAgB;IACd,OAAO,CACL3B,iBAAA,CAAkB;MAChB4B,IAAA,EAAM1B,UAAA;MACN2B,IAAA,EAAM,KAAKA;IACb,CAAC,EACH;EACF;AACF,CAAC;;;ACjGD,IAAOC,aAAA,GAAQ3B,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}