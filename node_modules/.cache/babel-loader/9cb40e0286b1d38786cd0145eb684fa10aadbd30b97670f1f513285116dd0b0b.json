{"ast":null,"code":"// src/bold.tsx\nimport { Mark, markInputRule, markPasteRule, mergeAttributes } from \"@tiptap/core\";\nimport { jsx } from \"@tiptap/core/jsx-runtime\";\nvar starInputRegex = /(?:^|\\s)(\\*\\*(?!\\s+\\*\\*)((?:[^*]+))\\*\\*(?!\\s+\\*\\*))$/;\nvar starPasteRegex = /(?:^|\\s)(\\*\\*(?!\\s+\\*\\*)((?:[^*]+))\\*\\*(?!\\s+\\*\\*))/g;\nvar underscoreInputRegex = /(?:^|\\s)(__(?!\\s+__)((?:[^_]+))__(?!\\s+__))$/;\nvar underscorePasteRegex = /(?:^|\\s)(__(?!\\s+__)((?:[^_]+))__(?!\\s+__))/g;\nvar Bold = Mark.create({\n  name: \"bold\",\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: \"strong\"\n    }, {\n      tag: \"b\",\n      getAttrs: node => node.style.fontWeight !== \"normal\" && null\n    }, {\n      style: \"font-weight=400\",\n      clearMark: mark => mark.type.name === this.name\n    }, {\n      style: \"font-weight\",\n      getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return /* @__PURE__ */jsx(\"strong\", {\n      ...mergeAttributes(this.options.HTMLAttributes, HTMLAttributes),\n      children: /* @__PURE__ */jsx(\"slot\", {})\n    });\n  },\n  addCommands() {\n    return {\n      setBold: () => ({\n        commands\n      }) => {\n        return commands.setMark(this.name);\n      },\n      toggleBold: () => ({\n        commands\n      }) => {\n        return commands.toggleMark(this.name);\n      },\n      unsetBold: () => ({\n        commands\n      }) => {\n        return commands.unsetMark(this.name);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      \"Mod-b\": () => this.editor.commands.toggleBold(),\n      \"Mod-B\": () => this.editor.commands.toggleBold()\n    };\n  },\n  addInputRules() {\n    return [markInputRule({\n      find: starInputRegex,\n      type: this.type\n    }), markInputRule({\n      find: underscoreInputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules() {\n    return [markPasteRule({\n      find: starPasteRegex,\n      type: this.type\n    }), markPasteRule({\n      find: underscorePasteRegex,\n      type: this.type\n    })];\n  }\n});\n\n// src/index.ts\nvar index_default = Bold;\nexport { Bold, index_default as default, starInputRegex, starPasteRegex, underscoreInputRegex, underscorePasteRegex };","map":{"version":3,"names":["Mark","markInputRule","markPasteRule","mergeAttributes","jsx","starInputRegex","starPasteRegex","underscoreInputRegex","underscorePasteRegex","Bold","create","name","addOptions","HTMLAttributes","parseHTML","tag","getAttrs","node","style","fontWeight","clearMark","mark","type","value","test","renderHTML","options","children","addCommands","setBold","commands","setMark","toggleBold","toggleMark","unsetBold","unsetMark","addKeyboardShortcuts","Mod-b","editor","Mod-B","addInputRules","find","addPasteRules","index_default"],"sources":["C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-bold\\src\\bold.tsx","C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-bold\\src\\index.ts"],"sourcesContent":["/** @jsxImportSource @tiptap/core */\nimport { Mark, markInputRule, markPasteRule, mergeAttributes } from '@tiptap/core'\n\nexport interface BoldOptions {\n  /**\n   * HTML attributes to add to the bold element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    bold: {\n      /**\n       * Set a bold mark\n       */\n      setBold: () => ReturnType\n      /**\n       * Toggle a bold mark\n       */\n      toggleBold: () => ReturnType\n      /**\n       * Unset a bold mark\n       */\n      unsetBold: () => ReturnType\n    }\n  }\n}\n\n/**\n * Matches bold text via `**` as input.\n */\nexport const starInputRegex = /(?:^|\\s)(\\*\\*(?!\\s+\\*\\*)((?:[^*]+))\\*\\*(?!\\s+\\*\\*))$/\n\n/**\n * Matches bold text via `**` while pasting.\n */\nexport const starPasteRegex = /(?:^|\\s)(\\*\\*(?!\\s+\\*\\*)((?:[^*]+))\\*\\*(?!\\s+\\*\\*))/g\n\n/**\n * Matches bold text via `__` as input.\n */\nexport const underscoreInputRegex = /(?:^|\\s)(__(?!\\s+__)((?:[^_]+))__(?!\\s+__))$/\n\n/**\n * Matches bold text via `__` while pasting.\n */\nexport const underscorePasteRegex = /(?:^|\\s)(__(?!\\s+__)((?:[^_]+))__(?!\\s+__))/g\n\n/**\n * This extension allows you to mark text as bold.\n * @see https://tiptap.dev/api/marks/bold\n */\nexport const Bold = Mark.create<BoldOptions>({\n  name: 'bold',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'strong',\n      },\n      {\n        tag: 'b',\n        getAttrs: node => (node as HTMLElement).style.fontWeight !== 'normal' && null,\n      },\n      {\n        style: 'font-weight=400',\n        clearMark: mark => mark.type.name === this.name,\n      },\n      {\n        style: 'font-weight',\n        getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value as string) && null,\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return (\n      <strong {...mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)}>\n        <slot />\n      </strong>\n    )\n  },\n\n  addCommands() {\n    return {\n      setBold:\n        () =>\n        ({ commands }) => {\n          return commands.setMark(this.name)\n        },\n      toggleBold:\n        () =>\n        ({ commands }) => {\n          return commands.toggleMark(this.name)\n        },\n      unsetBold:\n        () =>\n        ({ commands }) => {\n          return commands.unsetMark(this.name)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-b': () => this.editor.commands.toggleBold(),\n      'Mod-B': () => this.editor.commands.toggleBold(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: starInputRegex,\n        type: this.type,\n      }),\n      markInputRule({\n        find: underscoreInputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: starPasteRegex,\n        type: this.type,\n      }),\n      markPasteRule({\n        find: underscorePasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n","import { Bold } from './bold.jsx'\n\nexport * from './bold.jsx'\n\nexport default Bold\n"],"mappings":";AACA,SAASA,IAAA,EAAMC,aAAA,EAAeC,aAAA,EAAeC,eAAA,QAAuB;AAsF5D,SAAAC,GAAA;AArDD,IAAMC,cAAA,GAAiB;AAKvB,IAAMC,cAAA,GAAiB;AAKvB,IAAMC,oBAAA,GAAuB;AAK7B,IAAMC,oBAAA,GAAuB;AAM7B,IAAMC,IAAA,GAAOT,IAAA,CAAKU,MAAA,CAAoB;EAC3CC,IAAA,EAAM;EAENC,WAAA,EAAa;IACX,OAAO;MACLC,cAAA,EAAgB,CAAC;IACnB;EACF;EAEAC,UAAA,EAAY;IACV,OAAO,CACL;MACEC,GAAA,EAAK;IACP,GACA;MACEA,GAAA,EAAK;MACLC,QAAA,EAAUC,IAAA,IAASA,IAAA,CAAqBC,KAAA,CAAMC,UAAA,KAAe,YAAY;IAC3E,GACA;MACED,KAAA,EAAO;MACPE,SAAA,EAAWC,IAAA,IAAQA,IAAA,CAAKC,IAAA,CAAKX,IAAA,KAAS,KAAKA;IAC7C,GACA;MACEO,KAAA,EAAO;MACPF,QAAA,EAAUO,KAAA,IAAS,4BAA4BC,IAAA,CAAKD,KAAe,KAAK;IAC1E,EACF;EACF;EAEAE,WAAW;IAAEZ;EAAe,GAAG;IAC7B,OACE,eAAAT,GAAA,CAAC;MAAQ,GAAGD,eAAA,CAAgB,KAAKuB,OAAA,CAAQb,cAAA,EAAgBA,cAAc;MACrEc,QAAA,iBAAAvB,GAAA,CAAC,UAAK;IAAA,CACR;EAEJ;EAEAwB,YAAA,EAAc;IACZ,OAAO;MACLC,OAAA,EACEA,CAAA,KACA,CAAC;QAAEC;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASC,OAAA,CAAQ,KAAKpB,IAAI;MACnC;MACFqB,UAAA,EACEA,CAAA,KACA,CAAC;QAAEF;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASG,UAAA,CAAW,KAAKtB,IAAI;MACtC;MACFuB,SAAA,EACEA,CAAA,KACA,CAAC;QAAEJ;MAAS,MAAM;QAChB,OAAOA,QAAA,CAASK,SAAA,CAAU,KAAKxB,IAAI;MACrC;IACJ;EACF;EAEAyB,qBAAA,EAAuB;IACrB,OAAO;MACL,SAASC,CAAA,KAAM,KAAKC,MAAA,CAAOR,QAAA,CAASE,UAAA,CAAW;MAC/C,SAASO,CAAA,KAAM,KAAKD,MAAA,CAAOR,QAAA,CAASE,UAAA,CAAW;IACjD;EACF;EAEAQ,cAAA,EAAgB;IACd,OAAO,CACLvC,aAAA,CAAc;MACZwC,IAAA,EAAMpC,cAAA;MACNiB,IAAA,EAAM,KAAKA;IACb,CAAC,GACDrB,aAAA,CAAc;MACZwC,IAAA,EAAMlC,oBAAA;MACNe,IAAA,EAAM,KAAKA;IACb,CAAC,EACH;EACF;EAEAoB,cAAA,EAAgB;IACd,OAAO,CACLxC,aAAA,CAAc;MACZuC,IAAA,EAAMnC,cAAA;MACNgB,IAAA,EAAM,KAAKA;IACb,CAAC,GACDpB,aAAA,CAAc;MACZuC,IAAA,EAAMjC,oBAAA;MACNc,IAAA,EAAM,KAAKA;IACb,CAAC,EACH;EACF;AACF,CAAC;;;AC5ID,IAAOqB,aAAA,GAAQlC,IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}