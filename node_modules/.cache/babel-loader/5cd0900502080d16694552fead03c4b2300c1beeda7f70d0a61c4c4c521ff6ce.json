{"ast":null,"code":"// src/heading.ts\nimport { mergeAttributes, Node, textblockTypeInputRule } from \"@tiptap/core\";\nvar Heading = Node.create({\n  name: \"heading\",\n  addOptions() {\n    return {\n      levels: [1, 2, 3, 4, 5, 6],\n      HTMLAttributes: {}\n    };\n  },\n  content: \"inline*\",\n  group: \"block\",\n  defining: true,\n  addAttributes() {\n    return {\n      level: {\n        default: 1,\n        rendered: false\n      }\n    };\n  },\n  parseHTML() {\n    return this.options.levels.map(level => ({\n      tag: `h${level}`,\n      attrs: {\n        level\n      }\n    }));\n  },\n  renderHTML({\n    node,\n    HTMLAttributes\n  }) {\n    const hasLevel = this.options.levels.includes(node.attrs.level);\n    const level = hasLevel ? node.attrs.level : this.options.levels[0];\n    return [`h${level}`, mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setHeading: attributes => ({\n        commands\n      }) => {\n        if (!this.options.levels.includes(attributes.level)) {\n          return false;\n        }\n        return commands.setNode(this.name, attributes);\n      },\n      toggleHeading: attributes => ({\n        commands\n      }) => {\n        if (!this.options.levels.includes(attributes.level)) {\n          return false;\n        }\n        return commands.toggleNode(this.name, \"paragraph\", attributes);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return this.options.levels.reduce((items, level) => ({\n      ...items,\n      ...{\n        [`Mod-Alt-${level}`]: () => this.editor.commands.toggleHeading({\n          level\n        })\n      }\n    }), {});\n  },\n  addInputRules() {\n    return this.options.levels.map(level => {\n      return textblockTypeInputRule({\n        find: new RegExp(`^(#{${Math.min(...this.options.levels)},${level}})\\\\s$`),\n        type: this.type,\n        getAttributes: {\n          level\n        }\n      });\n    });\n  }\n});\n\n// src/index.ts\nvar index_default = Heading;\nexport { Heading, index_default as default };","map":{"version":3,"names":["mergeAttributes","Node","textblockTypeInputRule","Heading","create","name","addOptions","levels","HTMLAttributes","content","group","defining","addAttributes","level","default","rendered","parseHTML","options","map","tag","attrs","renderHTML","node","hasLevel","includes","addCommands","setHeading","attributes","commands","setNode","toggleHeading","toggleNode","addKeyboardShortcuts","reduce","items","editor","addInputRules","find","RegExp","Math","min","type","getAttributes","index_default"],"sources":["C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-heading\\src\\heading.ts","C:\\Users\\01\\vettam-editor\\node_modules\\@tiptap\\extension-heading\\src\\index.ts"],"sourcesContent":["import { mergeAttributes, Node, textblockTypeInputRule } from '@tiptap/core'\n\n/**\n * The heading level options.\n */\nexport type Level = 1 | 2 | 3 | 4 | 5 | 6\n\nexport interface HeadingOptions {\n  /**\n   * The available heading levels.\n   * @default [1, 2, 3, 4, 5, 6]\n   * @example [1, 2, 3]\n   */\n  levels: Level[]\n\n  /**\n   * The HTML attributes for a heading node.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    heading: {\n      /**\n       * Set a heading node\n       * @param attributes The heading attributes\n       * @example editor.commands.setHeading({ level: 1 })\n       */\n      setHeading: (attributes: { level: Level }) => ReturnType\n      /**\n       * Toggle a heading node\n       * @param attributes The heading attributes\n       * @example editor.commands.toggleHeading({ level: 1 })\n       */\n      toggleHeading: (attributes: { level: Level }) => ReturnType\n    }\n  }\n}\n\n/**\n * This extension allows you to create headings.\n * @see https://www.tiptap.dev/api/nodes/heading\n */\nexport const Heading = Node.create<HeadingOptions>({\n  name: 'heading',\n\n  addOptions() {\n    return {\n      levels: [1, 2, 3, 4, 5, 6],\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'inline*',\n\n  group: 'block',\n\n  defining: true,\n\n  addAttributes() {\n    return {\n      level: {\n        default: 1,\n        rendered: false,\n      },\n    }\n  },\n\n  parseHTML() {\n    return this.options.levels.map((level: Level) => ({\n      tag: `h${level}`,\n      attrs: { level },\n    }))\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    const hasLevel = this.options.levels.includes(node.attrs.level)\n    const level = hasLevel ? node.attrs.level : this.options.levels[0]\n\n    return [`h${level}`, mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setHeading:\n        attributes =>\n        ({ commands }) => {\n          if (!this.options.levels.includes(attributes.level)) {\n            return false\n          }\n\n          return commands.setNode(this.name, attributes)\n        },\n      toggleHeading:\n        attributes =>\n        ({ commands }) => {\n          if (!this.options.levels.includes(attributes.level)) {\n            return false\n          }\n\n          return commands.toggleNode(this.name, 'paragraph', attributes)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return this.options.levels.reduce(\n      (items, level) => ({\n        ...items,\n        ...{\n          [`Mod-Alt-${level}`]: () => this.editor.commands.toggleHeading({ level }),\n        },\n      }),\n      {},\n    )\n  },\n\n  addInputRules() {\n    return this.options.levels.map(level => {\n      return textblockTypeInputRule({\n        find: new RegExp(`^(#{${Math.min(...this.options.levels)},${level}})\\\\s$`),\n        type: this.type,\n        getAttributes: {\n          level,\n        },\n      })\n    })\n  },\n})\n","import { Heading } from './heading.js'\n\nexport * from './heading.js'\n\nexport default Heading\n"],"mappings":";AAAA,SAASA,eAAA,EAAiBC,IAAA,EAAMC,sBAAA,QAA8B;AA8CvD,IAAMC,OAAA,GAAUF,IAAA,CAAKG,MAAA,CAAuB;EACjDC,IAAA,EAAM;EAENC,WAAA,EAAa;IACX,OAAO;MACLC,MAAA,EAAQ,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;MACzBC,cAAA,EAAgB,CAAC;IACnB;EACF;EAEAC,OAAA,EAAS;EAETC,KAAA,EAAO;EAEPC,QAAA,EAAU;EAEVC,cAAA,EAAgB;IACd,OAAO;MACLC,KAAA,EAAO;QACLC,OAAA,EAAS;QACTC,QAAA,EAAU;MACZ;IACF;EACF;EAEAC,UAAA,EAAY;IACV,OAAO,KAAKC,OAAA,CAAQV,MAAA,CAAOW,GAAA,CAAKL,KAAA,KAAkB;MAChDM,GAAA,EAAK,IAAIN,KAAK;MACdO,KAAA,EAAO;QAAEP;MAAM;IACjB,EAAE;EACJ;EAEAQ,WAAW;IAAEC,IAAA;IAAMd;EAAe,GAAG;IACnC,MAAMe,QAAA,GAAW,KAAKN,OAAA,CAAQV,MAAA,CAAOiB,QAAA,CAASF,IAAA,CAAKF,KAAA,CAAMP,KAAK;IAC9D,MAAMA,KAAA,GAAQU,QAAA,GAAWD,IAAA,CAAKF,KAAA,CAAMP,KAAA,GAAQ,KAAKI,OAAA,CAAQV,MAAA,CAAO,CAAC;IAEjE,OAAO,CAAC,IAAIM,KAAK,IAAIb,eAAA,CAAgB,KAAKiB,OAAA,CAAQT,cAAA,EAAgBA,cAAc,GAAG,CAAC;EACtF;EAEAiB,YAAA,EAAc;IACZ,OAAO;MACLC,UAAA,EACEC,UAAA,IACA,CAAC;QAAEC;MAAS,MAAM;QAChB,IAAI,CAAC,KAAKX,OAAA,CAAQV,MAAA,CAAOiB,QAAA,CAASG,UAAA,CAAWd,KAAK,GAAG;UACnD,OAAO;QACT;QAEA,OAAOe,QAAA,CAASC,OAAA,CAAQ,KAAKxB,IAAA,EAAMsB,UAAU;MAC/C;MACFG,aAAA,EACEH,UAAA,IACA,CAAC;QAAEC;MAAS,MAAM;QAChB,IAAI,CAAC,KAAKX,OAAA,CAAQV,MAAA,CAAOiB,QAAA,CAASG,UAAA,CAAWd,KAAK,GAAG;UACnD,OAAO;QACT;QAEA,OAAOe,QAAA,CAASG,UAAA,CAAW,KAAK1B,IAAA,EAAM,aAAasB,UAAU;MAC/D;IACJ;EACF;EAEAK,qBAAA,EAAuB;IACrB,OAAO,KAAKf,OAAA,CAAQV,MAAA,CAAO0B,MAAA,CACzB,CAACC,KAAA,EAAOrB,KAAA,MAAW;MACjB,GAAGqB,KAAA;MACH,GAAG;QACD,CAAC,WAAWrB,KAAK,EAAE,GAAG,MAAM,KAAKsB,MAAA,CAAOP,QAAA,CAASE,aAAA,CAAc;UAAEjB;QAAM,CAAC;MAC1E;IACF,IACA,CAAC,CACH;EACF;EAEAuB,cAAA,EAAgB;IACd,OAAO,KAAKnB,OAAA,CAAQV,MAAA,CAAOW,GAAA,CAAIL,KAAA,IAAS;MACtC,OAAOX,sBAAA,CAAuB;QAC5BmC,IAAA,EAAM,IAAIC,MAAA,CAAO,OAAOC,IAAA,CAAKC,GAAA,CAAI,GAAG,KAAKvB,OAAA,CAAQV,MAAM,CAAC,IAAIM,KAAK,QAAQ;QACzE4B,IAAA,EAAM,KAAKA,IAAA;QACXC,aAAA,EAAe;UACb7B;QACF;MACF,CAAC;IACH,CAAC;EACH;AACF,CAAC;;;AC/HD,IAAO8B,aAAA,GAAQxC,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}